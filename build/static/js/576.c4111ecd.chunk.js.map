{"version":3,"file":"static/js/576.c4111ecd.chunk.js","mappings":"kIAEO,SAASA,EAA0BC,EAAOC,GAC7C,IAAIC,EAAa,IAAIC,WAAW,CAAC,GAAI,IAAK,IAAK,MAE/C,MAAMC,EAAiBC,EAAAA,UAAUC,SAASL,GAAWM,eACrDL,EAAa,IAAIC,WAAW,IAAID,KAAeE,IAE/C,IAAII,EAAOR,EACX,IAAK,IAAIS,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,MAAMC,EAASC,KAAKC,IAAI,EAAO,EAAJH,GACrBI,EAAMF,KAAKG,MAAMN,EAAOE,GAC9BR,EAAa,IAAIC,WAAW,IAAID,EAAYW,IAC5CL,GAAQK,EAAMH,CAChB,CAGA,OADuBL,EAAAA,UAAUU,eAAeb,GAC1Bc,QACxB,C,+JCPF,MA2FA,EA3FiBC,KAEb,MAAM,MAAEC,EAAK,MAAEC,IAAUC,EAAAA,EAAAA,MAClBC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,OACtCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,IACxCK,EAAeC,IAAoBN,EAAAA,EAAAA,WAAS,IAC5CO,EAAmBC,IAAwBR,EAAAA,EAAAA,WAAS,IAIpDS,EAAWC,KAHDC,EAAAA,EAAAA,OAGiBX,EAAAA,EAAAA,WAAS,KACpCY,EAAcC,IAAmBb,EAAAA,EAAAA,UAAS,KAC1Cc,EAAWC,IAAgBf,EAAAA,EAAAA,UAAS,KACrC,mBAAEgB,IAAuBC,EAAAA,EAAAA,KAKvBC,EACoB,OAA5BC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,YACR,kBACA,wBAEAC,EAAQ,IAAIC,EAAAA,GAAU,CAAEC,KAAML,EAAMM,WAAY,KAEhDC,GAAiBC,EAAAA,EAAAA,GAAY/B,EAAOgC,EAAAA,EAAYN,GAChDO,GAAcF,EAAAA,EAAAA,GAAYG,EAAAA,GAAsBC,EAAAA,EAAWT,IAGzDU,KAAMC,EAAUC,UAAWC,IAAgBC,EAAAA,EAAAA,GAAS,CAC1DC,SAAU,CAAC,eAIXC,EAAAA,EAAAA,YAAU,KAELC,GAAc,GAEjB,IAIF,MAAMA,EAAeC,UACjB,IAEI,GADAC,QAAQC,IAAI,YACP9C,IAAUC,EAAO,OACtB,IAAI8C,GAAkBlE,EAAAA,EAAAA,GAA0BoB,EAAOD,GAC/B,OAARqC,QAAQ,IAARA,GAAAA,EAAUW,MAAMC,GAAQA,EAAI,IAAMhD,UAOb,OAAXgC,QAAW,IAAXA,OAAW,EAAXA,EAAaiB,qBAAqBH,IAA3D,IACGI,QAAgC,OAAdrB,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,gBAItCP,QAAQC,IAAI,oBAAoBC,EAAgBI,EAUpD,CAAE,MAAOE,GACLR,QAAQC,IAAI,4BAA4BO,EAE5C,GAWN,OACEC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,QAEC,C","sources":["Utils/tid.jsx","pages/ListedNFT/TestPage.jsx"],"sourcesContent":["import { Principal } from '@dfinity/principal';\n\nexport function computeExtTokenIdentifier(index, principal) {\n    let identifier = new Uint8Array([10, 116, 105, 100]);\n  \n    const principalBytes = Principal.fromText(principal).toUint8Array();\n    identifier = new Uint8Array([...identifier, ...principalBytes]);\n  \n    let rest = index;\n    for (let i = 3; i >= 0; i--) {\n      const power2 = Math.pow(2, i * 8);\n      const val = Math.floor(rest / power2);\n      identifier = new Uint8Array([...identifier, val]);\n      rest -= val * power2;\n    }\n  \n    const finalPrincipal = Principal.fromUint8Array(identifier);\n    return finalPrincipal.toText();\n  }\n","import { HttpAgent } from \"@dfinity/agent\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { MARKETPLACE_CANISTER } from \"../../Utils/constants\";\nimport { createActor } from \"../../Utils/createActor\";\nimport { idlFactory } from \"../../Utils/paws.did\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { useEffect, useState } from \"react\";\nimport useFecth from \"../../Utils/useFecth\";\nimport { computeExtTokenIdentifier } from \"../../Utils/tid\";\n\nconst TestPage = () => {\n\n    const { colID, nftID } = useParams();\n    const [nftDetails, setNFTDetails] = useState(null);\n    const [newPrice, setNewPrice] = useState(\"\");\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [buttonLoading, setButtonLoading] = useState(false);\n    const [listbuttonLoading, setListButtonLoading] = useState(false);\n    const navigate = useNavigate();\n    \n\n    const [showModal, setShowModal] = useState(false);\n    const [modalMessage, setModalMessage] = useState(\"\");\n    const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n    const { invalidateListings } = useFecth();\n  \n\n\n    \n      const HOST =\n    process.env.DFX_NETWORK !== \"ic\"\n      ? \"https://ic0.app\"\n      : \"http://localhost:4943\";\n\n  const agent = new HttpAgent({ host: HOST, retryTimes: 10 })\n\n  const nativeNftActor = createActor(colID, idlFactory, agent);\n  const marketActor = createActor(MARKETPLACE_CANISTER, marketIDL, agent);\n  \n\n  const { data: myTokens, isLoading: dataLoading } = useQuery({\n    queryKey: [\"myTokens\"],\n  });\n\n\n    useEffect(()=>{\n\n         fetchDetails()\n        \n    },[])\n\n\n\n    const fetchDetails = async ()=>{\n        try {\n            console.log(\"working\");\n            if (!colID || !nftID) return;\n            let tokenIdentifier = computeExtTokenIdentifier(nftID, colID);\n            const nftInfo = myTokens?.find((nft) => nft[0] == nftID);\n            \n            // let [nativeTrans, markTrans] = await Promise.all([\n            //     await nativeNftActor?.transactions(),\n            //     await marketActor?.get_nft_sale_history(tokenIdentifier),\n            // ]);\n\n             let nativeTrans =  await marketActor?.get_nft_sale_history(tokenIdentifier)\n            let markTrans = await nativeNftActor?.transactions()\n\n            // let filtered = nativeTrans?.find((trans)=>trans.token == tokenIdentifier)\n            \n            console.log(\"token identifi5 :\",tokenIdentifier,markTrans);\n        \n\n\n\n\n            \n\n\n\n        } catch (error) {\n            console.log(\"erro in getting details :\",error);\n            \n        }\n    }\n\n\n\n\n\n\n\n\n\n  return (\n    <div>\n      Test\n    </div>\n  )\n}\n\nexport default TestPage\n"],"names":["computeExtTokenIdentifier","index","principal","identifier","Uint8Array","principalBytes","Principal","fromText","toUint8Array","rest","i","power2","Math","pow","val","floor","fromUint8Array","toText","TestPage","colID","nftID","useParams","nftDetails","setNFTDetails","useState","newPrice","setNewPrice","isModalOpen","setIsModalOpen","buttonLoading","setButtonLoading","listbuttonLoading","setListButtonLoading","showModal","setShowModal","useNavigate","modalMessage","setModalMessage","modalType","setModalType","invalidateListings","useFecth","HOST","process","DFX_NETWORK","agent","HttpAgent","host","retryTimes","nativeNftActor","createActor","idlFactory","marketActor","MARKETPLACE_CANISTER","marketIDL","data","myTokens","isLoading","dataLoading","useQuery","queryKey","useEffect","fetchDetails","async","console","log","tokenIdentifier","find","nft","get_nft_sale_history","markTrans","transactions","error","_jsx","children"],"sourceRoot":""}