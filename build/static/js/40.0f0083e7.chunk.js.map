{"version":3,"file":"static/js/40.0f0083e7.chunk.js","mappings":"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","sources":["pages/ListedNFT/MakeOffer.jsx","pages/ListedNFT/SaleHistory.jsx","pages/ListedNFT/Offers.jsx","pages/ListedNFT/MoreNfts.jsx","pages/ListedNFT/ListedNFTDetails.jsx","pages/ListedNFT/UpdatePrice.jsx","pages/Unlist.jsx"],"sourcesContent":["import { HttpAgent } from \"@dfinity/agent\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { createActor } from \"../../Utils/createActor\";\nimport {\n  getUnixTimestampInNanoseconds,\n  MARKETPLACE_CANISTER,\n  MY_LEDGER_CANISTER_ID,\n} from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { idlFactory as ICPDL } from \"../../Utils/icptoken.did\";\nimport { Principal } from \"@dfinity/principal\";\nconst MakeOffer = ({ nftid, nft_price, handleTrigger }) => {\n  const [isOfferModalOpen, setOfferModalOpen] = useState(false);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [offerAmount, setOfferAmount] = useState(\"\");\n  const [expiryDate, setExpiryDate] = useState(\"\");\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const { user } = useIdentityKit();\n\n  const authenticatedAgent = useAgent({ retryTimes: 2 });\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    // setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleMakeOffer = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n    try {\n      if (!user || !authenticatedAgent) {\n        displayNotificationModal(\"Log in first to make an Offer\", \"error\");\n\n        return;\n      }\n\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      const IcpActor = createActor(\n        MY_LEDGER_CANISTER_ID,\n        ICPDL,\n        authenticatedAgent\n      );\n\n      //apprive the marketplace to get the funds before placing an order\n      let approveResults = await IcpActor.icrc2_approve({\n        fee: [],\n        memo: [],\n        from_subaccount: [],\n        created_at_time: [],\n        amount: Number(offerAmount * 1e8) + 20000,\n        expected_allowance: [],\n        expires_at: [],\n        spender: {\n          owner: Principal.fromText(MARKETPLACE_CANISTER),\n          subaccount: [],\n        },\n      });\n\n      console.log(\"apprive results :\", approveResults);\n\n      let _days = getUnixTimestampInNanoseconds(expiryDate);\n\n      let res = await marketplaceActor?.place_offer_on_nft(\n        nftid,\n        Number(offerAmount * 1e8),\n        _days\n      );\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"Offer place successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n       handleTrigger();\n\n      console.log(\"offer results here:\", res);\n    } catch (error) {\n      console.log(\"error in placing offer :\", error);\n    }\n  };\n\n  const { mutateAsync: HandleMakeOffer } = useMutation({\n    mutationFn: (e) => handleMakeOffer(e),\n    onSuccess: async () => {\n      setButtonLoading(false);\n    },\n  });\n\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n\n  return (\n    <div className=\"flex bg-[#2c2d2e] w-1/2 rounded-lg mt-4 text-white justify-center items-center p-2 cursor-pointer\">\n      <button onClick={() => setOfferModalOpen(true)}>Make Offer</button>\n\n      {isOfferModalOpen && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n        <div\n          className={`fixed inset-0 z-50 flex items-center justify-center`}\n        >\n          <div\n            className={`flex items-center flex-col text-white border p-2 rounded-lg ${\n              modalType == \"success\" ? \"bg-green-800\" : \"bg-red-500\"\n            }`}\n          >\n            <p>{modalMessage}</p>\n            <button\n              className=\"mt-2 w-[50px] bg-gray-200 text-gray-800 rounded px-1 py-1\"\n              onClick={handleCloseModal}\n            >\n              ok\n            </button>\n          </div>\n        </div>\n      )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Make Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setOfferModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={HandleMakeOffer}>\n              {/* <label className=\"block mb-2\" htmlFor=\"price\">\n                Enter Offer amount\n              </label> */}\n              <input\n                type=\"number\"\n                id=\"price\"\n                placeholder=\"enter offer amount\"\n                value={offerAmount}\n                onChange={(e) => setOfferAmount(e.target.value)}\n                className=\" border border-white text-sm text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <input\n                type=\"number\"\n                id=\"price\"\n                value={expiryDate}\n                placeholder=\"enter number of days\"\n                onChange={(e) => setExpiryDate(e.target.value)}\n                className=\" border border-white text-sm text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Place Offer\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MakeOffer;\n","import React from 'react'\n\nconst SaleHistory = ({history}) => {\n  \n  const convertTime = (timestamp) => {\n    const date = new Date(Number(timestamp)/1e6);\n    return date.toLocaleString(); // Adjust options as needed\n};\n\n// Helper function to shorten addresses\nconst shortenAddress = (address) => {\n    return `${address?.slice(0, 6)}...${address?.slice(-4)}`;\n};\n\n  return (\n    <div className=\"overflow-x-auto bg-[#1B1B1B] p-2 rounded-lg border border-gray-400 h-[200px] md:h-[400px]\">\n      <h3 className='text-lg'>Activity</h3>\n    <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"\">\n            <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Buyer</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Seller</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Price</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Time</th>\n            </tr>\n        </thead>\n        <tbody className=\" divide-y divide-gray-200\">\n            {history?.length > 0 ? history?.map((item, index) => (\n                <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{shortenAddress(item?.buyer?.toString())}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{shortenAddress(item?.seller?.toString())}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{Number(item?.price)/1e8}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{convertTime(item?.time)}</td>\n                </tr>\n            ))\n            :\n            <div className='text-xs flex justify-center items-center '>No activity available</div>\n          \n          }\n        </tbody> \n    </table>\n</div>\n  )\n}\n\nexport default SaleHistory\n\n\n\n// buyer: \"9ab3fc5674ae93846daa935812e6d9b36925b2c9810e03a9ebc5adddad634d93\"\n// price: 68000000n\n// seller: \"9ab3fc5674ae93846daa935812e6d9b36925b2c9810e03a9ebc5adddad634d93\"\n// time: 1730255389263606802n\n// token: \"cg7z3-4akor-uwiaa-aaaaa-cqace-eaqca-aaad4-a\"","import { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { createActor } from \"../../Utils/createActor\";\nimport {\n  convertExpiryDate,\n  MARKETPLACE_CANISTER,\n  shortenAddress,\n} from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { useNavigate } from \"react-router-dom\";\nconst Offers = ({ offers, nft, nftOwner, handleTrigger }) => {\n  const authenticatedAgent = useAgent();\n  const { user } = useIdentityKit();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  const [cancelModal, setCancelModal] = useState(false);\n  const [cancelLoading, setCancelLoading] = useState(false);\n  const [selectedOffer, setSelectedOffer] = useState(null);\n  const [acceptModal, setAcceptModal] = useState(false);\n  const [acceptLoading, setAcceptLoading] = useState(false);\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    // setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleAccept = async (offer, nft) => {\n    try {\n      setAcceptLoading(true);\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      if (!marketplaceActor || !selectedOffer) {\n        return;\n      }\n\n      console.log(\"selected offer :\", selectedOffer);\n\n      let res = await marketplaceActor?.accept_offer(\n        selectedOffer.nft,\n        selectedOffer.offer.offer_id\n      );\n      console.log(\"accept nft sale :\", res);\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT sold successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n\n      queryClient.setQueryData([\"refreshData\"], Math.random());\n    } catch (error) {\n      console.log(\"error in accepting offer :\", error);\n    }\n\n    setAcceptLoading(false);\n    setAcceptModal(false);\n    navigate(\"/\");\n  };\n\n  const handleCancel = async () => {\n    try {\n      setCancelLoading(true);\n\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      if (!marketplaceActor || !selectedOffer) {\n        return;\n      }\n      console.log(selectedOffer);\n\n      let res = await marketplaceActor?.cancel_offer(\n        selectedOffer?.offer.offer_id,\n        selectedOffer?.nft\n      );\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"Offer cancelled successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n      handleTrigger();\n    } catch (error) {\n      console.log(\"error in canceling offer :\", error);\n    }\n    setCancelModal(false);\n    setCancelLoading(false);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div className=\"overflow-x-auto mb-10 bg-[#1B1B1B] p-2 rounded-lg border border-gray-400\">\n      {cancelModal && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg flex flex-col items-center justify-center gap-1 shadow-lg p-6 w-96\">\n            <div className=\"flex  w-full justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Cancel Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setCancelModal(false)}\n              />\n            </div>\n            <span>Proceed to cancel offer?</span>\n            {cancelLoading ? (\n              <ClipLoader color=\"white\" size={20} />\n            ) : (\n              <button\n                onClick={() => handleCancel()}\n                className=\"flex w-1/2 mt-2 justify-center items-center  bg-red-500 p-1 rounded-lg\"\n              >\n                Confirm\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {acceptModal && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg flex flex-col items-center justify-center gap-1 shadow-lg p-6 w-96\">\n            <div className=\"flex  w-full justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Accept Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setAcceptModal(false)}\n              />\n            </div>\n            <span>Confirm offer?</span>\n            {acceptLoading ? (\n              <ClipLoader color=\"white\" size={20} />\n            ) : (\n              <button\n                onClick={() => handleAccept()}\n                className=\"flex w-1/2 mt-2 justify-center items-center  bg-green-500 p-1 rounded-lg\"\n              >\n                Confirm\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      <h3 className=\"text-lg\">Offers</h3>\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"\">\n          <tr>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              User\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Amount\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Expiry Date\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Action\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\" divide-y divide-gray-200\">\n          {offers?.length > 0 ? (\n            offers?.map((offer, index) => (\n              <tr key={index}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                  {shortenAddress(offer?.user?.toString())}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                  {Number(offer?.amount) / 1e8} ICP\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                  {convertExpiryDate(Number(offer?.expiry_date))}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                  <div className=\"flex flex-col items-center justify-center gap-1\">\n                    {user &&\n                      user?.principal?.toString() ==\n                        offer?.user?.toString() && (\n                        <button\n                          // onClick={() => handleCancel(offer, nft)}\n                          onClick={() => {\n                            setSelectedOffer({ offer, nft });\n                            setCancelModal(true);\n                          }}\n                          className=\"flex  bg-red-500 p-1 rounded-lg\"\n                        >\n                          Cancel\n                        </button>\n                      )}\n\n                    {user && user?.principal?.toString() == nftOwner && (\n                      <button\n                        onClick={() => {\n                          setSelectedOffer({ offer, nft });\n                          setAcceptModal(true);\n                        }}\n                        className=\"flex bg-green-500 p-1 rounded-lg\"\n                      >\n                        Accept\n                      </button>\n                    )}\n                  </div>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <div className=\"flex w-full justify-center items-center text-xs mt-3\">\n              {\" \"}\n              No offers available\n            </div>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Offers;\n","import { useQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../collection/Card\";\n\nconst MoreNfts = ({ collectionID, nftID, nftPrice, nftDetails }) => {\n  const [moreNfts, setMoreNfts] = useState([]);\n  const { data: myTokens, isLoading: dataLoading } = useQuery({\n    queryKey: [\"myTokens\"],\n  });\n\n  // console.log(\"cccc :\", nftPrice);\n\n  //get the nfts from this nft that have the same price range as the nft being listed\n  useEffect(() => {\n    const getMoreNfts = async () => {\n      try {\n        // console.log(\" gg sd :\",myTokens);\n\n        let rangePrice = myTokens\n          ?.filter(\n            (nft) =>\n              (Number(nft[1].price) / 1e8).toFixed(2) > nftPrice - 1 &&\n              (Number(nft[1].price) / 1e8).toFixed(2) < nftPrice + 1 &&\n              nft[0] != nftID\n          )\n          .slice(0, 4);\n\n        let cardNts = rangePrice?.map((nft, index) => (\n          <Card key={index} nft={nft} collectionID={collectionID} />\n        ));\n        // console.log(\"price range :\",rangePrice);\n\n        setMoreNfts(cardNts);\n      } catch (error) {\n        console.log(\"error in getting more nfts :\", error);\n      }\n    };\n    getMoreNfts();\n  }, [nftDetails]);\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <div className=\"flex w-full items-center justify-center\">\n        More NFTS from this collection\n      </div>\n      <div className=\"flex flex-col w-full\">\n        <div className=\"flex flex-row w-full\">\n          {/* Display the NFTs */}\n          <div className=\"flex-grow w-full flex mt-6 justify-center items-center flex-wrap\">\n            {moreNfts}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MoreNfts;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { computeExtTokenIdentifier } from \"../../Utils/tid\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { HttpAgent } from \"@dfinity/agent\";\nimport { idlFactory } from \"../../Utils/paws.did\";\nimport {\n  copyToClipboard,\n  getColorFromId,\n  MARKETPLACE_CANISTER,\n  PAWS_ARENA_CANISTER,\n  shortenAddress,\n  traitsData,\n} from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { createActor } from \"../../Utils/createActor\";\nimport { IoCopy, IoEyeSharp } from \"react-icons/io5\";\nimport MakeOffer from \"./MakeOffer\";\n// import BuyNow from \"./BuyNFT\";\nimport useFecth from \"../../Utils/useFecth\";\nimport SaleHistory from \"./SaleHistory\";\nimport Offers from \"./Offers\";\nimport MoreNfts from \"./MoreNfts\";\nimport { AccountIdentifier } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport UnlistUpdate from \"../Unlist\";\nimport { useIdentityKit } from \"@nfid/identitykit/react\";\nimport UpdatePrice from \"./UpdatePrice\";\nimport { idlFactory as PawsIDL } from \"../../Utils/paws.did\";\nimport ICPLogo from \"../../assets/icplogo.png\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport BuyNow from \"../BuyNow\";\nimport genes from \"../../genes\";\nimport { BsCopy } from \"react-icons/bs\";\nimport Rarity from \"../../rarity.json\";\n\nconst ListedNFTDetails = () => {\n  const { colID, nftID } = useParams();\n  const [nftDetails, setNFTDetails] = useState({});\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [listbuttonLoading, setListButtonLoading] = useState(false);\n  const [contentLoading, setContentLoading] = useState(false);\n\n  const [listTrigger, setTrigger] = useState(\"\");\n  const navigate = useNavigate();\n\n  const { user } = useIdentityKit();\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  const { data: refreshData } = useQuery({\n    queryKey: [\"refreshData\"],\n  });\n\n  const { data: myTokens, isLoading: dataLoading } = useQuery({\n    queryKey: [\"myTokens\"],\n  });\n\n  const { data: bulkData } = useQuery({\n    queryKey: [\"bulkData\"],\n  });\n\n  const agent = useMemo(\n    () => new HttpAgent({ host: \"https://ic0.app\", retryTimes: 10 }),\n    []\n  );\n\n  const marketActor = useMemo(\n    () => createActor(MARKETPLACE_CANISTER, marketIDL, agent),\n    [agent]\n  );\n\n  const [saleHistory, setSaleHistory] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n  const [nftTraits, setNftTraits] = useState(null);\n  const [nftViews, setNftViews] = useState(null);\n  const { invalidateListings } = useFecth();\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleTrigger = (e) => setTrigger(Math.random());\n\n  const tokenIdentifier = useMemo(() => {\n    if (!colID || !nftID) return null;\n    return computeExtTokenIdentifier(nftID, colID);\n  }, [colID, nftID]);\n\n  const nftInfo = useMemo(() => {\n    return myTokens?.find((nft) => nft[0] == nftID);\n  }, [myTokens, nftID]);\n\n  //store the nft view in the database\n  useEffect(() => {\n    const saveView = async () => {\n      if (!nftID) return;\n      try {\n        let tokenIdentifier = computeExtTokenIdentifier(nftID, colID);\n        console.log(\"token identifier :\", tokenIdentifier);\n        let saveRes = await marketActor.save_nft_view(tokenIdentifier);\n        let _views = await marketActor.get_nft_views(tokenIdentifier);\n\n        if (_views.status == 200 && _views.status_text == \"Ok\") {\n          setNftViews(Number(_views.data[0]));\n        }\n      } catch (error) {\n        console.log(\"error in saving and retrieving total nft view :\", error);\n      }\n    };\n\n    saveView();\n  }, [nftID]);\n\n  // console.log(\"nft info :\", nftTraits);\n  useEffect(() => {\n    const fetchDetails = async () => {\n      try {\n        if (!colID || !nftID) return;\n        setContentLoading(true);\n        // let tokenIdentifier = computeExtTokenIdentifier(nftID, colID);\n        // let nftInfo = myTokens?.filter((nft) => nft[0] == nftID);\n        let nftActor = createActor(PAWS_ARENA_CANISTER, PawsIDL, agent);\n        // const nftInfo = myTokens?.find((nft) => nft[0] == nftID);\n        let markTrans = await marketActor?.get_nft_sale_history(\n          tokenIdentifier\n        );\n        let tokenListings = bulkData?.find((det) => det[0] == colID);\n        let fil = tokenListings[1]?.transactions?.filter(\n          (tran) => tran?.token == tokenIdentifier\n        );\n\n        setSaleHistory(\n          markTrans.data.length > 0 ? [...fil, ...markTrans.data[0]] : fil\n        );\n\n        if (nftInfo?.length > 0) {\n          console.log(\"nft info :\", nftInfo);\n\n          //  if the nft is not listed\n          if (nftInfo[1].hasOwnProperty(\"nonfungible\")) {\n            //get the owner of the nft\n            //dont display the buy and make offer buttons\n            let _owner = await nftActor.bearer(tokenIdentifier);\n\n            setNFTDetails({\n              listed: false,\n              tokenIdentifier: computeExtTokenIdentifier(nftID, colID),\n              seller_principal: _owner?.ok,\n            });\n          } else if (nftInfo[1].inhouse_sale) {\n            //fetch all the details from the marketplace canister\n            let details = await marketActor?.get_listed_nft_details(\n              tokenIdentifier\n            );\n            console.log(\"inhouse listed nft :\", details);\n            if (details.status === 200 && details.status_text === \"Ok\") {\n              setNFTDetails({ ...details.data[0], listed: true });\n            }\n          }\n        } else {\n          //handle if the nft is not found in the collections fetched from the canister\n        }\n\n        const _traits = genes[nftID];\n\n        let DD = [];\n\n        for (const _id of _traits) {\n          const res = getColorFromId(_id);\n          if (res !== undefined) {\n            DD.push(res);\n          }\n        }\n\n        setNftTraits(DD);\n\n        console.log(\"traits here :\", _traits, DD);\n      } catch (error) {\n        console.log(\"error in fetching details :\", error);\n      }\n      setContentLoading(false);\n    };\n\n    fetchDetails();\n  }, [colID, nftID, listTrigger]);\n\n  return (\n    <div className=\"flex w-full min-h-screen gap-4 flex-col items-center  text-white px-2 md:px-20 mt-[100px]\">\n      {contentLoading ? (\n        <div className=\"w-full flex justify-center h-screen items-center\">\n          <ClipLoader color=\"white\" size={25} />\n        </div>\n      ) : (\n        <div className=\"flex w-full h-full flex-col md:flex-row gap-2 mx-4\">\n          <div className=\"flex flex-col gap-4 w-full md:w-1/2 h-full md:items-start  mb-4 md:mb-0\">\n            <div className=\"rounded-lg p-1 w-full flex border border-gray-400 pt-3 flex-col\">\n              <img\n                src={`https://${colID}.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n                  nftID,\n                  colID\n                )}&type=thumbnail`}\n                alt=\"\"\n                className=\"rounded-md ml-3 w-auto cursor-pointer\"\n              />\n            </div>\n\n            <div className=\"hidden md:flex flex-col w-full items-start\">\n              <h1 className=\"font-bold\">Traits</h1>\n              <div className=\"flex flex-wrap w-full\">\n                {nftTraits ? (\n                  nftTraits.map((trait, index) => (\n                    <div\n                      key={index}\n                      className=\"flex flex-col p-1 w-full md:w-1/2 lg:w-1/3\"\n                    >\n                      <span className=\"font-bold\">{trait[0]}</span>\n                      <span>{trait[1].color}</span>\n                    </div>\n                  ))\n                ) : (\n                  <span className=\"text-sm\">Coming Soon ...</span>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex  justify flex-col w-full md:w-1/2 \">\n            <div className=\"flex flex-col gap-2\">\n              <div className=\"flex\">\n                <button\n                  className=\"flex border rounded-md px-2 \"\n                  onClick={() => navigate(\"/collection/\" + colID)}\n                >\n                  Back\n                </button>\n              </div>\n              <h1 className=\"text-[30px] font-bold\">\n                {nftDetails && \"ICKitties\"} # {Number(nftID) + 1}\n              </h1>\n              <span className=\" text-sm\">\n                NRI: {(Rarity[Number(nftID)] * 100).toFixed(1)}%{\" \"}\n              </span>\n\n              <div className=\"flex items-center gap-2\">\n                <span>\n                  Owned by{\" \"}\n                  {shortenAddress(nftDetails?.seller_principal?.toString())}\n                </span>\n\n                <BsCopy\n                  color=\"white\"\n                  className=\"cursor-pointer\"\n                  onClick={() =>\n                    copyToClipboard(nftDetails?.seller_principal?.toString())\n                  }\n                />\n              </div>\n\n              <div className=\"flex gap-1  text-sm items-center\">\n                <span>{<IoEyeSharp size={25} color=\"gray\" />}</span>\n                <span>{nftViews && nftViews} views</span>\n              </div>\n\n              {/* {nftDetails?.nft_price && ( */}\n              <div className=\"flex flex-col  xs:px-3 md:px-0 gap-4 w-full\">\n                {nftDetails?.listed && (\n                  <div className=\"flex  flex-col w-full gap-1  bg-[#1B1B1B] border border-gray-400 p-2 rounded-lg\">\n                    <h3>Current Price</h3>\n                    <div className=\"flex flex-row gap-1\">\n                      <img src={ICPLogo} height=\"7px\" width=\"15px\" />\n\n                      <span className=\"flex text-lg\">\n                        {nftDetails &&\n                          (Number(nftDetails?.nft_price) / 1e8).toFixed(3)}\n                      </span>\n                    </div>\n                    {user &&\n                    user.principal.toString() ===\n                      nftDetails?.seller_principal?.toString() ? (\n                      <div className=\"flex flex-row gap-4 justify-center items-center w-full\">\n                        <UnlistUpdate nft={nftDetails?.token_identifier} />\n                        <UpdatePrice\n                          nft={nftDetails?.token_identifier}\n                          handleTrigger={handleTrigger}\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"flex flex-row gap-4 w-full\">\n                        <BuyNow\n                          nft_price={Number(nftDetails?.nft_price)}\n                          nftid={nftDetails?.token_identifier}\n                        />\n                        <MakeOffer\n                          nft_price={Number(nftDetails?.nft_price)}\n                          nftid={nftDetails?.token_identifier}\n                          handleTrigger={handleTrigger}\n                        />\n                      </div>\n                    )}\n                  </div>\n                )}\n                <SaleHistory history={saleHistory} />\n                <Offers\n                  offers={nftDetails?.offers}\n                  nft={nftDetails?.token_identifier}\n                  nftOwner={nftDetails?.seller_principal?.toString()}\n                  handleTrigger={handleTrigger}\n                />\n              </div>\n              {/* )} */}\n            </div>\n          </div>\n        </div>\n      )}\n      {nftDetails && (\n        <MoreNfts\n          nftDetails={nftDetails}\n          collectionID={colID}\n          nftID={nftID}\n          nftPrice={Number(nftDetails?.nft_price) / 1e8}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListedNFTDetails;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport useFecth from \"../../Utils/useFecth\";\nimport { createActor } from \"../../Utils/createActor\";\nimport { MARKETPLACE_CANISTER } from \"../../Utils/constants\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\n\nconst UpdatePrice = ({ nft, handleTrigger }) => {\n  // console.log(\"update price :\", nft);\n\n  const [updateModal, setUpdateModal] = useState(false);\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [updateloading, setUpdateLoading] = useState(false);\n  const { invalidateListings } = useFecth();\n  const [listbuttonLoading, setListButtonLoading] = useState(false);\n  const authenticatedAgent = useAgent();\n  const { user } = useIdentityKit();\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { mutateAsync: HandleUpdatePrice } = useMutation({\n    mutationFn: (e) => handleUpdatePrice(e),\n    onSuccess: async () => {\n      invalidateListings();\n    },\n  });\n\n  const handleUpdatePrice = async (e) => {\n    e.preventDefault();\n\n    let marketplaceActor = createActor(\n      MARKETPLACE_CANISTER,\n      marketIDL,\n      authenticatedAgent\n    );\n\n    console.log(\"new price : \", newPrice,nft);\n\n    if (!marketplaceActor) {\n      displayNotificationModal(\"login first\", \"error\");\n      return;\n    }\n\n    if (!newPrice || newPrice == 0 || !nft) return;\n    setListButtonLoading(true);\n    setUpdateLoading(true);\n    let res = await marketplaceActor?.update_nft_price(\n      nft,\n      parseInt(newPrice * 1e8)\n    );\n\n    if (res?.status == 200 && res?.status_text == \"Ok\") {\n      displayNotificationModal(\"price updated successfully\", \"success\");\n    } else {\n      displayNotificationModal(res?.error_text, \"error\");\n    }\n\n    // console.log(\"update price results :\", res);\n    handleTrigger();\n    setListButtonLoading(false);\n    setUpdateLoading(false);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1 w-1/2\">\n      {showModal && (\n        <div\n          className={`absolute text-xs top-5 z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n            modalType === \"success\"\n              ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n              : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n          }`}\n        >\n          <div className=\"modal-message\">\n            <p>{modalMessage}</p>\n          </div>\n        </div>\n      )}\n      <button\n        className=\"flex bg-[#6fa0d1] w-full rounded-lg mt-4 text-white justify-center items-center p-2\"\n        onClick={() => setUpdateModal(true)}\n      >\n        Update\n      </button>\n\n      {updateModal && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\" mb-4\">Update NFT price</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setUpdateModal(false)}\n              />\n            </div>\n\n            <form onSubmit={HandleUpdatePrice}>\n              <input\n                type=\"number\"\n                id=\"price\"\n                value={newPrice}\n                placeholder=\"enter new nft price\"\n                onChange={(e) => setNewPrice(e.target.value)}\n                className=\" border border-white text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {updateloading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    update\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UpdatePrice;\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport useFecth from \"../Utils/useFecth\";\nimport { useAgent } from \"@nfid/identitykit/react\";\nimport { MARKETPLACE_CANISTER } from \"../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../Utils/markeptlace.did\";\nimport { createActor } from \"../Utils/createActor\";\nimport { useNavigate } from \"react-router-dom\";\nconst UnlistUpdate = ({ nft, handleTrigger }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const { invalidateListings, invalidateUserNfts } = useFecth();\n  const authenticatedAgent = useAgent();\n\n  const navigate = useNavigate();\n  const queryClient = useQueryClient()\n\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { mutateAsync: HandleList } = useMutation({\n    mutationFn: () => handleUnlist(),\n    onSuccess: async () => {\n      invalidateListings();\n      invalidateUserNfts();\n      setButtonLoading(false);\n    },\n  });\n\n  const handleUnlist = async () => {\n    let marketplaceActor = createActor(\n      MARKETPLACE_CANISTER,\n      marketIDL,\n      authenticatedAgent\n    );\n\n    if (!nft || !marketplaceActor) return;\n    setButtonLoading(true);\n\n    try {\n      console.log(\"unlist :\", nft);\n\n      let res = await marketplaceActor?.un_list_nft(nft);\n\n      if (res?.status == 200 && res?.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT unlisted successfully\", \"success\");\n        navigate(\"/profile\");\n      } else {\n        displayNotificationModal(res?.error_text, \"error\");\n        navigate(\"/profile\");\n      }\n      // handleTrigger();\n      queryClient.setQueryData([\"refreshData\"], Math.random());\n      console.log(\"unlisting res :\", res);\n    } catch (error) {\n      console.log(\"error in unlisting token :\", error);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1 w-1/2\">\n      <div className=\"flex flex-row gap-4\">\n        <button\n          className=\"flex bg-[#2c2d2e] rounded-lg w-full mt-4 text-white justify-center items-center p-2 cursor-pointer\"\n          onClick={() => setIsModalOpen(true)}\n        >\n          Unlist\n        </button>\n      </div>\n      {isModalOpen && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\" mb-4\">Unlist NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n            <span>Remove NFT from the marketplace?</span>\n\n            <div className=\"flex justify-end mt-3\">\n              {buttonLoading ? (\n                <ClipLoader color=\"white\" size={20} />\n              ) : (\n                <button\n                  onClick={HandleList}\n                  className=\"px-4 py-2 bg-white text-black rounded\"\n                >\n                  Unlist\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UnlistUpdate;\n"],"names":["_ref","nftid","nft_price","handleTrigger","isOfferModalOpen","setOfferModalOpen","useState","buttonLoading","setButtonLoading","offerAmount","setOfferAmount","expiryDate","setExpiryDate","showModal","setShowModal","modalMessage","setModalMessage","modalType","setModalType","user","useIdentityKit","authenticatedAgent","useAgent","retryTimes","displayNotificationModal","async","_message","_type","mutateAsync","HandleMakeOffer","useMutation","mutationFn","e","preventDefault","marketplaceActor","createActor","MARKETPLACE_CANISTER","marketIDL","IcpActor","MY_LEDGER_CANISTER_ID","ICPDL","approveResults","icrc2_approve","fee","memo","from_subaccount","created_at_time","amount","Number","expected_allowance","expires_at","spender","owner","Principal","fromText","subaccount","console","log","_days","getUnixTimestampInNanoseconds","res","place_offer_on_nft","status","status_text","error_text","error","handleMakeOffer","onSuccess","_jsxs","className","children","_jsx","onClick","handleCloseModal","CgClose","onSubmit","type","id","placeholder","value","onChange","target","required","ClipLoader","color","size","history","shortenAddress","address","slice","length","map","item","index","_item$buyer","_item$seller","timestamp","buyer","toString","seller","price","time","Date","toLocaleString","offers","nft","nftOwner","navigate","useNavigate","queryClient","useQueryClient","cancelModal","setCancelModal","cancelLoading","setCancelLoading","selectedOffer","setSelectedOffer","acceptModal","setAcceptModal","acceptLoading","setAcceptLoading","cancel_offer","offer","offer_id","handleCancel","accept_offer","setQueryData","Math","random","handleAccept","_offer$user","_user$principal","_offer$user2","_user$principal2","convertExpiryDate","expiry_date","principal","collectionID","nftID","nftPrice","nftDetails","moreNfts","setMoreNfts","data","myTokens","isLoading","dataLoading","useQuery","queryKey","useEffect","rangePrice","filter","toFixed","cardNts","Card","getMoreNfts","ListedNFTDetails","_nftDetails$seller_pr","_nftDetails$seller_pr3","_nftDetails$seller_pr4","colID","useParams","setNFTDetails","newPrice","setNewPrice","isModalOpen","setIsModalOpen","listbuttonLoading","setListButtonLoading","contentLoading","setContentLoading","listTrigger","setTrigger","refreshData","bulkData","agent","useMemo","HttpAgent","host","marketActor","saleHistory","setSaleHistory","nftTraits","setNftTraits","nftViews","setNftViews","invalidateListings","useFecth","tokenIdentifier","computeExtTokenIdentifier","nftInfo","find","save_nft_view","_views","get_nft_views","saveView","_tokenListings$","_tokenListings$$trans","nftActor","PAWS_ARENA_CANISTER","PawsIDL","markTrans","get_nft_sale_history","fil","det","transactions","tran","token","hasOwnProperty","_owner","bearer","listed","seller_principal","ok","inhouse_sale","details","get_listed_nft_details","_traits","genes","DD","_id","getColorFromId","undefined","push","fetchDetails","src","alt","trait","Rarity","BsCopy","_nftDetails$seller_pr2","copyToClipboard","IoEyeSharp","ICPLogo","height","width","UnlistUpdate","token_identifier","UpdatePrice","BuyNow","MakeOffer","SaleHistory","Offers","MoreNfts","updateModal","setUpdateModal","updateloading","setUpdateLoading","setTimeout","HandleUpdatePrice","handleUpdatePrice","update_nft_price","parseInt","invalidateUserNfts","HandleList","handleUnlist","un_list_nft"],"sourceRoot":""}