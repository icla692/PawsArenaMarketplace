{"version":3,"file":"static/js/694.d1d45929.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size\n}) {\n  let qrcode = React.useMemo(() => {\n    const segments = qrcodegen_default.QrSegment.makeSegments(value);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion\n    );\n  }, [value, level, minVersion]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],"names":["MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","mutationKey","hashKey","state","status","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","onSuccess","data","onSettled","onError","error","listeners","forEach","listener","useMutation","queryClient","useQueryClient","React","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError","mutateAsync","qrcodegen","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","qrcodegen2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","dataUsedBits","minVersion","arguments","length","undefined","maxVersion","boostEcl","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","Math","min","padByte","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","QrCode","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","qrcode","segments","cells","numCells","calculatedImageSettings","cells2","margin2","getMarginSize","numCells2","calculatedImageSettings2","defaultSize","scale","width","height","opacity","excavate","floorX","floorY","crossOrigin","getImageSettings","SUPPORTS_PATH2D","Path2D","addPath","e","props","forwardedRef","_a","bgColor","fgColor","_b","style","otherProps","imgSrc","src","_canvas","_image","setCanvasRef","node","current","isImgLoaded","setIsImageLoaded","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","display","onLoad","ref","role","displayName","title","href","preserveAspectRatio","fgPath","viewBox","d","shapeRendering"],"sourceRoot":""}