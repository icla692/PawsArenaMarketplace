{"version":3,"file":"static/js/928.080fecfb.chunk.js","mappings":"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","sources":["../node_modules/react-spinners/esm/ClipLoader.js","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cssValue } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar clip = createAnimation(\"ClipLoader\", \"0% {transform: rotate(0deg) scale(1)} 50% {transform: rotate(180deg) scale(0.8)} 100% {transform: rotate(360deg) scale(1)}\", \"clip\");\nfunction ClipLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.size, size = _f === void 0 ? 35 : _f, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\"]);\n    var style = __assign({ background: \"transparent !important\", width: cssValue(size), height: cssValue(size), borderRadius: \"100%\", border: \"2px solid\", borderTopColor: color, borderBottomColor: \"transparent\", borderLeftColor: color, borderRightColor: color, display: \"inline-block\", animation: \"\".concat(clip, \" \").concat(0.75 / speedMultiplier, \"s 0s infinite linear\"), animationFillMode: \"both\" }, cssOverride);\n    if (!loading) {\n        return null;\n    }\n    return React.createElement(\"span\", __assign({ style: style }, additionalprops));\n}\nexport default ClipLoader;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size\n}) {\n  let qrcode = React.useMemo(() => {\n    const segments = qrcodegen_default.QrSegment.makeSegments(value);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion\n    );\n  }, [value, level, minVersion]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","clip","createAnimation","_a","_b","loading","_c","color","_d","speedMultiplier","_e","cssOverride","_f","size","additionalprops","style","background","width","cssValue","height","borderRadius","border","borderTopColor","borderBottomColor","borderLeftColor","borderRightColor","display","animation","concat","animationFillMode","React","MutationObserver","Subscribable","constructor","client","options","super","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","mutationKey","hashKey","state","status","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","onSuccess","data","onSettled","onError","error","listeners","forEach","listener","useMutation","queryClient","useQueryClient","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError","mutateAsync","qrcodegen","__defProp","defineProperty","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","__objRest","source","exclude","target","qrcodegen2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","row","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","dataUsedBits","minVersion","undefined","maxVersion","boostEcl","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","Math","min","padByte","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","QrCode","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","qrcode","segments","cells","numCells","calculatedImageSettings","cells2","margin2","getMarginSize","numCells2","calculatedImageSettings2","defaultSize","scale","opacity","excavate","floorX","floorY","crossOrigin","getImageSettings","SUPPORTS_PATH2D","Path2D","addPath","props","forwardedRef","bgColor","fgColor","otherProps","imgSrc","src","_canvas","_image","setCanvasRef","node","current","isImgLoaded","setIsImageLoaded","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","onLoad","ref","role","displayName","title","href","preserveAspectRatio","fgPath","viewBox","d","shapeRendering"],"sourceRoot":""}