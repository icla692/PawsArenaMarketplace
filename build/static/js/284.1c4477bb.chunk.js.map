{"version":3,"file":"static/js/284.1c4477bb.chunk.js","mappings":"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","sources":["Utils/tid.jsx","components/ListNFT.jsx","components/TransferNFT.jsx","components/TransferICP.jsx","pages/Profile.jsx","pages/UnlistUpdate.jsx"],"sourcesContent":["import { Principal } from '@dfinity/principal';\n\nexport function computeExtTokenIdentifier(index, principal) {\n    let identifier = new Uint8Array([10, 116, 105, 100]);\n  \n    const principalBytes = Principal.fromText(principal).toUint8Array();\n    identifier = new Uint8Array([...identifier, ...principalBytes]);\n  \n    let rest = index;\n    for (let i = 3; i >= 0; i--) {\n      const power2 = Math.pow(2, i * 8);\n      const val = Math.floor(rest / power2);\n      identifier = new Uint8Array([...identifier, val]);\n      rest -= val * power2;\n    }\n  \n    const finalPrincipal = Principal.fromUint8Array(identifier);\n    return finalPrincipal.toText();\n  }\n","import { Principal } from \"@dfinity/principal\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport { MARKETPLACE_CANISTER } from \"../Utils/constants\";\nimport useFecth from \"../Utils/useFecth\";\n\nconst ListNFT = ({ nft }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [newPrice, setNewPrice] = useState(0);\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n\nconst {invalidateListings} = useFecth()\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const { data: nftActor } = useQuery({\n    queryKey: [\"nftActor\"],\n  });\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n\n  const { mutateAsync: HandleList } = useMutation({\n    mutationFn: (e) => handleList(e),\n    onSuccess: async () => {\n       invalidateListings()\n      setButtonLoading(false);\n    },\n  });\n\n\n\n\n  const handleList = async (e) => {\n    e.preventDefault()\n    if (!marketplaceActor || !userPrincipal || !nftActor) return;\n\n    if (newPrice == 0) {\n      alert(\"price is zero\");\n      return;\n    }\n    // if (!window.confirm(\"Are you sure you want to list the NFT?\")) return;\n\n    setButtonLoading(true);\n    try {\n      // Call the init function on the marketplace with specified price\n      let initRes = await marketplaceActor?.init_list_nft(\n        Principal.fromText(userPrincipal),\n        nft.nftid,\n        { Kitties: null },\n        parseInt(newPrice * 1e8) // Convert ICP to subunits\n      );\n      console.log(\"init res:\", initRes);\n\n      let tokenIdentifier = computeExtTokenIdentifier(\n        nft.nftid,\n        nft.canister_id\n      );\n      let transferRes = await nftActor.transfer({\n        amount: parseInt(1),\n        from: { principal: Principal.fromText(userPrincipal) },\n        memo: [],\n        notify: false,\n        subaccount: [],\n        to: { principal: Principal.fromText(MARKETPLACE_CANISTER) },\n        token: tokenIdentifier,\n      });\n\n      console.log(\"transfer result:\", transferRes);\n\n      let res = await marketplaceActor.complete_listing(\n        Principal.fromText(userPrincipal),\n        nft.nftid,\n        { Kitties: null }\n      );\n      console.log(\"final listing:\", res);\n\n      // if (fin.status === 200 && fin.status_text === \"Ok\") {\n      //   alert(\"NFT listed successfully\");\n      // } else {\n      //   alert(fin.status_error);\n      // }\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT listed successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n    } catch (error) {\n      console.log(\"Error in listing NFT:\", error);\n    }\n  };\n\n  return (\n    <div className=\"relative flex-row gap-1 flex w-full bg-[#2E8DEE] font-bold text-white justify-center items-center p-2 \">\n      <button onClick={() => setIsModalOpen(true)}>List</button>\n\n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">List NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={HandleList}>\n              <label className=\"block mb-2\" htmlFor=\"price\">\n                Enter listing price\n              </label>\n              <input\n                type=\"number\"\n                id=\"price\"\n                value={newPrice}\n                onChange={(e) => setNewPrice(e.target.value)}\n                className=\" border border-white text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Confirm listing\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n\n\n\n      )}\n    </div>\n  );\n};\n\nexport default ListNFT;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport useFecth from \"../Utils/useFecth\";\nimport { ClipLoader } from \"react-spinners\";\nimport { CgClose } from \"react-icons/cg\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport { MARKETPLACE_CANISTER } from \"../Utils/constants\";\nimport { Principal } from \"@dfinity/principal\";\n\nconst TransferNFT = ({ nft }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isPreviewOpen,setPreviewOpen] = useState(false)\n  const [recipient, setRecipient] = useState(\"\");\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n\n  const {invalidateListings} = useFecth()\n\n  //modals for the notification popup\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  //function to toggle the notification on and off display\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n\n  const { mutateAsync: HandleTransfer } = useMutation({\n    mutationFn: (e) => handleTransfer(e),\n    onSuccess: async () => {\n       invalidateListings()\n      setButtonLoading(false);\n    },\n  });\n\n\n  const handleTransfer = async (e)=>{\n    e.preventDefault()\n    setButtonLoading(true);\n\n    console.log(\"nft :\",nft);\n    \n    if(!nftActor || !nft) displayNotificationModal(\"please login first\",\"success\")\n    //get the token identifier of the nft\nlet tokenIdentifier = computeExtTokenIdentifier(Number(nft.nftid),nft.canister_id)\n\n//should create an ft canister instance but for now use the ic kitties\n\nlet transferResults = await nftActor.transfer({\n    amount: parseInt(1),\n        from: { principal: Principal.fromText(userPrincipal) }, \n        memo: [],\n        notify: false,\n        subaccount: [],\n        to: { address: recipient },\n        token: tokenIdentifier,\n})\n\nif (transferResults.ok) {\n  displayNotificationModal(\"NFT transfer successful\", \"success\");\n} else {\n  displayNotificationModal(transferResults.err, \"error\");\n}\n\n\n\n\n\n\n    console.log(\"transfer success\",transferResults);\n    \n\n  }\n\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const { data: nftActor } = useQuery({\n    queryKey: [\"nftActor\"],\n  });\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  return (\n    <div className=\"relative flex-row gap-1 flex w-full bg-[#2E8DEE] font-bold text-white justify-center items-center p-2 \">\n      <button onClick={() => setIsModalOpen(true)}>Transfer</button>\n     \n     \n     \n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Transfer NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={(HandleTransfer)}>\n              <input\n                type=\"text\"\n                id=\"recipient\"\n                placeholder=\"enter recipient account\"\n                value={recipient}\n                onChange={(e) => setRecipient(e.target.value)}\n                className=\" border border-white text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Transfer\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n     \n     \n     \n     \n     \n      </div>\n  );\n};\n\nexport default TransferNFT;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport useFetch from \"../Utils/useFecth\"; // Fixed typo in import\nimport { ClipLoader } from \"react-spinners\";\nimport { CgClose } from \"react-icons/cg\";\nimport { Principal } from \"@dfinity/principal\";\n\nconst TransferICP = () => {\n  // State variables\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [isPreviewOpen, setPreviewOpen] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  // Fetch data using React Query\n  const { invalidateListings, invalidateUserNfts, invalidateUserBalance } = useFetch();\n\n  const { data: userIcpBalance } = useQuery({queryKey:[\"userIcpBalance\"]});\n  const { data: IcpActor } = useQuery({queryKey:[\"IcpActor\"]});\n\n\n  // const { data: userPrincipal } = useQuery({\n  //   queryKey: [\"userPrincipal\"],\n  // });\n\n  // Mutation for handling withdrawal\n  const { mutateAsync: handleWithdraw } = useMutation({\n    mutationFn: (e) => processWithdraw(e),\n    onSuccess: async () => {\n      invalidateListings();\n      invalidateUserNfts();\n      invalidateUserBalance();\n      setButtonLoading(false);\n    },\n  });\n\n  // Function to display notification modal\n  const displayNotificationModal = (message, type) => {\n    setModalMessage(message);\n    setModalType(type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  // Function to process withdrawal\n  const processWithdraw = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n\n    if (!IcpActor) return;\n\n    try {\n      \n      const transferResults = await IcpActor.icrc1_transfer({\n        to: { owner: Principal.fromText(recipient), subaccount: [] },\n        fee: [],\n        memo: [],\n        from_subaccount: [],\n        created_at_time: [],\n        amount: Number(amount) * 1e8,\n      });\n      \n      console.log(\"dddd2\",transferResults);\n      // if (transferResults.Ok) {\n      //   displayNotificationModal(\"ICP transfer successful\", \"success\");\n      // } else {\n      //   displayNotificationModal(transferResults.Err, \"error\");\n      // }\n    } catch (error) {\n      console.error(\"Error in sending ICP:\", error);\n      displayNotificationModal(\"An error occurred during the transfer\", \"error\");\n    }\n    \n    setButtonLoading(false);\n  };\n\n  // Function to handle preview action\n  const handlePreview = (e) => {\n    e.preventDefault();\n    setPreviewOpen(true);\n  };\n\n  // Function to shorten addresses for display\n\n  return (\n    <div className=\"relative flex flex-row gap-1 text-white justify-center items-center p-2\">\n      <div className=\"flex flex-col justify-center items-center\">\n        <button className=\"px-4 py-2 bg-white text-black rounded\" onClick={() => setIsModalOpen(true)}>\n          Withdraw\n        </button>\n        <span>{userIcpBalance && userIcpBalance} ICP</span>\n      </div>\n\n      {/* Modal for withdrawal */}\n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {/* Notification Modal */}\n          {showModal && (\n            <div className={`absolute text-xs top-10 z-50 left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${modalType === \"success\" ? \"bg-green-100 text-green-800 border border-green-300\" : \"bg-red-100 text-red-800 border border-red-300\"} rounded-lg p-1`}>\n              <p>{modalMessage}</p>\n            </div>\n          )}\n\n          {/* Preview or Input Form */}\n          {isPreviewOpen ? (\n            <PreviewSection \n              recipient={recipient}\n              amount={amount}\n              buttonLoading={buttonLoading}\n              onWithdraw={handleWithdraw}\n              onClose={() => {\n                setIsModalOpen(false);\n                setPreviewOpen(false);\n              }}\n            />\n          ) : (\n            <InputSection \n              recipient={recipient}\n              amount={amount}\n              buttonLoading={buttonLoading}\n              onPreview={handlePreview}\n              onRecipientChange={setRecipient}\n              onAmountChange={setAmount}\n              onClose={() => setIsModalOpen(false)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Component for Input Form\nconst InputSection = ({ recipient, amount, buttonLoading, onPreview, onRecipientChange, onAmountChange, onClose }) => (\n  <div className=\"bg-[#252525] rounded-lg text-sm shadow-lg p-6 w-96\">\n    <div className=\"flex justify-between\">\n      <h2 className=\"mb-4\">Withdraw ICP</h2>\n      <CgClose className=\"cursor-pointer\" onClick={onClose} />\n    </div>\n\n    <form onSubmit={onPreview}>\n      <input\n        type=\"text\"\n        id=\"recipient\"\n        value={recipient}\n        placeholder=\"Enter principal\"\n        onChange={(e) => onRecipientChange(e.target.value)}\n        className=\"border border-white text-black rounded p-1 w-full mb-4\"\n        required\n      />\n      <input\n        type=\"number\"\n        id=\"amount\"\n        value={amount}\n        placeholder=\"Enter amount\"\n        onChange={(e) => onAmountChange(e.target.value)}\n        className=\"border border-white text-black rounded p-1 w-full mb-4\"\n        required\n      />\n      <div className=\"flex justify-end\">\n        {buttonLoading ? (\n          <ClipLoader color=\"white\" size={20} />\n        ) : (\n          <button type=\"submit\" className=\"px-4 py-2 bg-white text-black rounded\">\n            Preview\n          </button>\n        )}\n      </div>\n    </form>\n  </div>\n);\nconst shortenAddress = (address) => `${address.slice(0, 15)}...${address.slice(-10)}`;\n\n// Component for Preview Section\nconst PreviewSection = ({ recipient, amount, buttonLoading, onWithdraw, onClose }) => (\n  <div className=\"bg-[#252525] text-sm rounded-lg shadow-lg p-6 w-96\">\n    <div className=\"flex justify-between\">\n      <h2 className=\"text-xl border-b w-full mb-4\">Withdraw Preview</h2>\n      <CgClose className=\"cursor-pointer\" onClick={onClose} />\n    </div>\n\n    <div className=\"flex text-sm flex-col gap-1 w-full\">\n      <DetailItem label=\"Destination:\" value={shortenAddress(recipient)} />\n      <DetailItem label=\"Amount:\" value={`${amount} ICP`} />\n      <DetailItem label=\"Fee:\" value=\"0.0001 ICP\" />\n    </div>\n\n    <div className=\"flex mt-3 justify-end\">\n      {buttonLoading ? (\n        <ClipLoader color=\"white\" size={20} />\n      ) : (\n        <button onClick={onWithdraw} className=\"px-4 py-2 bg-white text-black rounded\">\n          Send\n        </button>\n      )}\n    </div>\n  </div>\n);\n\n// Component for displaying detail items in the preview section\nconst DetailItem = ({ label, value }) => (\n  <div className=\"flex flex-col\">\n    <span>{label}</span>\n    <span className=\"flex text-gray-400\">{value}</span>\n  </div>\n);\n\nexport default TransferICP;","import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { QRCodeCanvas as QRCode } from \"qrcode.react\";\nimport pawsarena from \"../assets/pawsarena.png\"; // Placeholder for profile picture\nimport { AiOutlineCopy } from \"react-icons/ai\"; // Import copy icon\nimport { AccountIdentifier } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport UnlistUpdate from \"./UnlistUpdate\";\nimport ListNFT from \"../components/ListNFT\";\nimport { useNavigate } from \"react-router-dom\";\nimport TransferNFT from \"../components/TransferNFT\";\nimport TransferICP from \"../components/TransferICP\";\n\nconst style = {\n  wrapper: `flex bg-[#121212] min-h-screen flex-col w-full items-center p-4 text-white`,\n  profileSection: `flex flex-col gap-1 justify-evenly items-center bg-[#212121] rounded-lg p-4 w-full max-w-4xl mb-6`,\n  profilePicture: `h-24 w-24 md:h-32 md:w-32 rounded-full border-2 border-[#8a939b] mb-4`,\n  addressContainer: `flex  mb-2`,\n  address: `  mb-2 text-center`,\n  balance: `text-md text-[#8a939b] mb-4`,\n  qrCodeContainer: `flex flex-col items-center`,\n  qrCodeLabel: `text-md font-semibold mb-2`,\n  nftsSection: `w-full max-w-[90%]  rounded-lg p-4`,\n  nftGrid: `flex flex-wrap justify-center gap-1`, // Grid layout for NFTs\n\n  nftCard: `bg-[#212121] w-[200px] mb-3 rounded-md  overflow-hidden`,\n  nftImg: `w-[200px] h-48 ml-[3px] mt-[3px] rounded-t-md cursor-pointer    object-cover`, // Removed redundant w-full\n  info: `flex justify-between text-white drop-shadow-xl ml-2 mr-2`,\n  infoLeft: `flex-0.6 flex-wrap`,\n  assetName: `font-bold mt-1`, // Responsive text sizes\n};\n\nconst Profile = () => {\n  const [userNFTList, setuserNFTList] = useState(null);\n  const [userAccount, setUserAccount] = useState(null);\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const { data: userIcpBalance } = useQuery({\n    queryKey: [\"userIcpBalance\"],\n  });\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  const { data: nftActor } = useQuery({\n    queryKey: [\"nftActor\"],\n  });\n\n  const { data: userNFTS } = useQuery({\n    queryKey: [\"userNFTS\"],\n  });\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!userPrincipal) return;\n    let res = AccountIdentifier.fromPrincipal({\n      principal: Principal.fromText(userPrincipal),\n      subAccount: undefined,\n    }).toHex();\n    console.log(res);\n    setUserAccount(res);\n  }, [userPrincipal]);\n\n  useEffect(() => {\n    const fetchUserListedNFTS = async () => {\n      try {\n        let NFTArray = [];\n        if (!userPrincipal || !marketplaceActor) return;\n        let res = await marketplaceActor?.get_all_user_listed_nfts(\n          Principal.fromText(userPrincipal)\n        );\n\n        console.log(\"heeee :\", res.data[0]);\n\n        if (\n          res.status == 200 &&\n          res.status_text == \"Ok\" &&\n          res.data[0].length > 0\n        ) {\n          for (const data of res.data[0]) {\n            if(data.isConfirmed === true){\n\n              NFTArray.push({\n                nftid: data.nft_id,\n                type: \"Listed\",\n                canister_id: data.nft_canister,\n                collectionName: Object.keys(data.nft_category)[0],\n              });\n            }\n          }\n        }\n\n        let accIdentifier = AccountIdentifier.fromPrincipal({\n          principal: Principal.fromText(userPrincipal),\n          subAccount: undefined,\n        }).toHex();\n\n        let ownedTokens = await nftActor?.tokens(accIdentifier);\n\n        let tokens = Array.from(ownedTokens?.ok);\n        console.log(\"ahaha :\", tokens);\n\n        if (tokens && tokens.length > 0) {\n          for (const data of tokens) {\n            NFTArray.push({\n              nftid: data,\n              type: \"Owned\",\n              canister_id: \"rw7qm-eiaaa-aaaak-aaiqq-cai\",\n              collectionName: \"Kitties\",\n            });\n          }\n        }\n        console.log(\"aaaaa :\", NFTArray);\n\n        setuserNFTList(NFTArray);\n      } catch (error) {\n        console.log(\"error in fetching user listed NFTs\", error);\n      }\n    };\n\n    fetchUserListedNFTS();\n  }, [userPrincipal, marketplaceActor, nftActor, userNFTS]);\n\n  const userAddress = userPrincipal || \"0x1234567890abcdef\";\n  const userBalance = userIcpBalance || 100;\n\n  const handleCopyAddress = (userAddress) => {\n    navigator.clipboard.writeText(userAddress);\n    alert(\"Address copied to clipboard!\");\n  };\n\n  const shortenAddress = (address) => {\n    return `${address.slice(0, 11)}...${address.slice(-7)}`;\n  };\n\n  return (\n    <>\n      {userPrincipal ? (\n        <div className={style.wrapper}>\n          <div className={style.profileSection}>\n            <div className={style.addressContainer}>\n              <div className={style.address}>\n                {userAddress && shortenAddress(userAddress)}\n              </div>\n              <AiOutlineCopy\n                onClick={()=>handleCopyAddress(userAddress)}\n                className=\"cursor-pointer text-lg hover:text-blue-500\"\n              />\n            </div>\n            <div className={style.addressContainer}>\n              <div className={style.address}>\n                {userAccount && shortenAddress(userAccount)}\n              </div>\n              <AiOutlineCopy\n                onClick={()=>handleCopyAddress(userAccount)}\n                className=\"cursor-pointer text-lg hover:text-blue-500\"\n              />\n            </div>\n            <TransferICP />\n\n            {/* <div>{userIcpBalance && userIcpBalance} ICP</div> */}\n          </div>\n\n          {/* NFTs Section */}\n          <div className={style.nftsSection}>\n            <h2 className=\"text-xl font-semibold mb-4 text-center\">My NFTs</h2>\n\n            <div className={style.nftGrid}>\n              {userNFTList && userNFTList.length > 0 ? (\n                userNFTList.map((nft, index) => (\n                  <div className={style.nftCard}>\n                    <img\n                      src={`https://${\n                        nft.canister_id\n                      }.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n                        nft.nftid,\n                        nft.canister_id\n                      )}&type=thumbnail`}\n                      alt=\"\"\n                      onClick={() =>\n                        navigate(\n                          nft.type === \"Listed\" &&\n                            \"../marketplace/\" +\n                              nft.canister_id +\n                              \"/\" +\n                              nft.nftid\n                          // : \"../nft/\" + nft.canister_id + \"/\" + nft.nftid\n                        )\n                      }\n                      className={style.nftImg}\n                    />\n                    <div className={style.info}>\n                      <div className={style.infoLeft}>\n                        <div className={style.collectionName}>\n                          {nft.collectionName}\n                        </div>\n                      </div>\n                      <div className={style.infoRight}>\n                        <div className={style.assetName}>#{nft.nftid} </div>\n                      </div>\n                    </div>\n                    {nft.type == \"Owned\" ? (\n                      <div className=\"flex flex-row mt-4 gap-2 justify-center items-center\">\n                        <ListNFT nft={nft} />\n                        <TransferNFT nft={nft} />\n                      </div>\n                    ) : (\n                      <UnlistUpdate\n                        nft={computeExtTokenIdentifier(\n                          nft.nftid,\n                          nft.canister_id\n                        )}\n                      />\n                    )}\n                  </div>\n                ))\n              ) : (\n                <div className={style.profileSection}>\n                  <p>No NFTs found.</p>\n                  <p>Your NFTS will appear here</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        navigate(\"/\")\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport useFecth from \"../Utils/useFecth\";\n\nconst UnlistUpdate = ({ nft }) => {\n  // console.log(\"nft id :\", nft);\n\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const { invalidateListings, invalidateUserNfts } = useFecth();\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const { data: userIcpBalance } = useQuery({\n    queryKey: [\"userIcpBalance\"],\n  });\n\n  const { data: allListings } = useQuery({\n    queryKey: [\"allListings\"],\n  });\n\n  const { data: IcpActor } = useQuery({\n    queryKey: [\"IcpActor\"],\n  });\n\n  const { data: userNFTS } = useQuery({\n    queryKey: [\"userNFTS\"],\n  });\n\n  const { data: nftActor } = useQuery({\n    queryKey: [\"nftActor\"],\n  });\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  const { mutateAsync: HandleList } = useMutation({\n    mutationFn: () => handleUnlist(),\n    onSuccess: async () => {\n      invalidateListings();\n      invalidateUserNfts();\n      setButtonLoading(false);\n    },\n  });\n\n  const handleUnlist = async () => {\n    if (!nft) return;\n    setButtonLoading(true);\n\n    try {\n      let res = await marketplaceActor.un_list_nft(nft.token_identifier);\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT unlisted successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n      console.log(\"unlisting res :\", res);\n    } catch (error) {\n      console.log(\"error in unlisting token :\", error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(\"new price : \", newPrice);\n\n   if(!window.confirm(\"Update the price of the nft\")) return\n    let res = await marketplaceActor.update_nft_price(\n      nft.token_identifier,\n      parseInt(newPrice * 1e8)\n    );\n\n    console.log(\"update price :\",res);\n    \n  };\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      <div className=\"flex flex-row gap-4 w-full\">\n        <button\n        className=\"flex bg-[#2E8DEE] w-1/2 rounded-lg mt-4 font-bold text-white justify-center items-center p-2\"\n        onClick={() => setIsModalOpen(true)}\n        >\n          Unlist\n        </button>\n        <button\n        className=\"flex bg-[#5e6163] w-1/2 rounded-lg mt-4 font-bold text-white justify-center items-center p-2\"\n        onClick={() => setIsModalOpen(true)}\n        >\n          Update\n        </button>\n      </div>\n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\" mb-4\">Unlist NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n            <span>Remove NFT from the marketplace?</span>\n\n            <div className=\"flex justify-end mt-3\">\n              {buttonLoading ? (\n                <ClipLoader color=\"white\" size={20} />\n              ) : (\n                <button\n                  onClick={HandleList}\n                  className=\"px-4 py-2 bg-white text-black rounded\"\n                >\n                  Unlist\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UnlistUpdate;\n"],"names":["computeExtTokenIdentifier","index","principal","identifier","Uint8Array","principalBytes","Principal","fromText","toUint8Array","rest","i","power2","Math","pow","val","floor","fromUint8Array","toText","_ref","nft","isModalOpen","setIsModalOpen","useState","newPrice","setNewPrice","buttonLoading","setButtonLoading","invalidateListings","useFecth","showModal","setShowModal","modalMessage","setModalMessage","modalType","setModalType","displayNotificationModal","async","_message","_type","setTimeout","data","userPrincipal","useQuery","queryKey","nftActor","marketplaceActor","mutateAsync","HandleList","useMutation","mutationFn","e","handleList","onSuccess","preventDefault","initRes","init_list_nft","nftid","Kitties","parseInt","console","log","tokenIdentifier","canister_id","transferRes","transfer","amount","from","memo","notify","subaccount","to","MARKETPLACE_CANISTER","token","res","complete_listing","status","status_text","error_text","error","alert","_jsxs","className","children","_jsx","onClick","CgClose","onSubmit","htmlFor","type","id","value","onChange","target","required","ClipLoader","color","size","isPreviewOpen","setPreviewOpen","recipient","setRecipient","HandleTransfer","handleTransfer","Number","transferResults","address","ok","err","placeholder","InputSection","onPreview","onRecipientChange","onAmountChange","onClose","PreviewSection","_ref2","onWithdraw","DetailItem","label","slice","_ref3","TransferICP","setAmount","invalidateUserNfts","invalidateUserBalance","useFetch","userIcpBalance","IcpActor","handleWithdraw","processWithdraw","icrc1_transfer","owner","fee","from_subaccount","created_at_time","style","wrapper","profileSection","profilePicture","addressContainer","balance","qrCodeContainer","qrCodeLabel","nftsSection","nftGrid","nftCard","nftImg","info","infoLeft","assetName","Profile","userNFTList","setuserNFTList","userAccount","setUserAccount","userNFTS","navigate","useNavigate","useEffect","AccountIdentifier","fromPrincipal","subAccount","undefined","toHex","NFTArray","get_all_user_listed_nfts","length","isConfirmed","push","nft_id","nft_canister","collectionName","Object","keys","nft_category","accIdentifier","ownedTokens","tokens","Array","fetchUserListedNFTS","userAddress","handleCopyAddress","navigator","clipboard","writeText","shortenAddress","_Fragment","AiOutlineCopy","map","src","alt","infoRight","ListNFT","TransferNFT","UnlistUpdate","allListings","handleUnlist","un_list_nft","token_identifier"],"sourceRoot":""}