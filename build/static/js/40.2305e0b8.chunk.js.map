{"version":3,"file":"static/js/40.2305e0b8.chunk.js","mappings":"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","sources":["pages/BuyNow.jsx","pages/ListedNFT/MakeOffer.jsx","pages/ListedNFT/SaleHistory.jsx","pages/ListedNFT/Offers.jsx","pages/ListedNFT/MoreNfts.jsx","pages/ListedNFT/ListedNFTDetails.jsx","pages/collection/Card.jsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport {\n  MARKETPLACE_CANISTER,\n  MY_LEDGER_CANISTER_ID,\n} from \"../Utils/constants\";\nimport { Principal } from \"@dfinity/principal\";\nimport { ClipLoader } from \"react-spinners\";\nimport useFecth from \"../Utils/useFecth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { createActor } from \"../Utils/createActor\";\nimport { idlFactory as marketIDL } from \"../Utils/markeptlace.did\";\nimport { idlFactory as ICPDL } from \"../Utils/icptoken.did\";\n\nconst BuyNow = ({ nftid, nft_price, userP }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n  const { invalidateListings, invalidateUserNfts, invalidateUserBalance } =\n    useFecth();\n\n  const authenticatedAgent = useAgent();\n  const { user } = useIdentityKit();\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const navigate = useNavigate();\n  const { mutateAsync: HandleBuy } = useMutation({\n    mutationFn: () => handleBuy(),\n    onSuccess: async () => {\n      invalidateListings();\n      invalidateUserNfts();\n      invalidateUserBalance();\n      setIsLoading(false);\n    },\n  });\n\n  const handleBuy = async () => {\n    try {\n      if (!user || !authenticatedAgent) {\n        displayNotificationModal(\"Log in first to purchase this NFT\", \"error\");\n        return;\n      }\n\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      const IcpActor = createActor(\n        MY_LEDGER_CANISTER_ID,\n        ICPDL,\n        authenticatedAgent\n      );\n\n      setIsLoading(true);\n      //approve the marketplace to transfer funds on the user/s behalf\n      let approveResults = await IcpActor.icrc2_approve({\n        fee: [],\n        memo: [],\n        from_subaccount: [],\n        created_at_time: [],\n        amount: Number(nft_price) + 20000,\n        expected_allowance: [],\n        expires_at: [],\n        spender: {\n          owner: Principal.fromText(MARKETPLACE_CANISTER),\n          subaccount: [],\n        },\n      });\n\n      console.log(\"approve results :\", approveResults);\n\n      let res = await marketplaceActor.buy_nft(nftid);\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT purchase successful\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n      console.log(\"buy results :\", res);\n    } catch (error) {\n      console.log(\"error in buying nft :\", error);\n    }\n    navigate(\"/profile\");\n  };\n\n  return (\n    <>\n      {showModal && (\n        <div\n          className={`absolute top-10 z-50 text-xs  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n            modalType === \"success\"\n              ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n              : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n          }`}\n        >\n          <div className=\"modal-message\">\n            <p>{modalMessage}</p>\n          </div>\n        </div>\n      )}\n\n      <button\n        onClick={() => HandleBuy()}\n        className=\"flex w-full bg-[#2E8DEE] rounded-b-lg mt-4 font-bold text-white justify-center items-center p-2\"\n      >\n        {isLoading ? <ClipLoader size={20} color=\"white\" /> : \"Buy\"}\n      </button>\n    </>\n  );\n};\n\nexport default BuyNow;\n","import { HttpAgent } from \"@dfinity/agent\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { createActor } from \"../../Utils/createActor\";\nimport {\n  getUnixTimestampInNanoseconds,\n  MARKETPLACE_CANISTER,\n  MY_LEDGER_CANISTER_ID,\n} from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { idlFactory as ICPDL } from \"../../Utils/icptoken.did\";\nimport { Principal } from \"@dfinity/principal\";\nconst MakeOffer = ({ nftid, nft_price, handleTrigger }) => {\n  const [isOfferModalOpen, setOfferModalOpen] = useState(false);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [offerAmount, setOfferAmount] = useState(\"\");\n  const [expiryDate, setExpiryDate] = useState(\"\");\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const { user } = useIdentityKit();\n\n  const authenticatedAgent = useAgent({ retryTimes: 2 });\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleMakeOffer = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n    try {\n      if (!user || !authenticatedAgent) {\n        return;\n      }\n\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      const IcpActor = createActor(MY_LEDGER_CANISTER_ID, ICPDL, authenticatedAgent);\n\n      //apprive the marketplace to get the funds before placing an order\n      let approveResults = await IcpActor.icrc2_approve({\n        fee: [],\n        memo: [],\n        from_subaccount: [],\n        created_at_time: [],\n        amount: Number(offerAmount * 1e8) + 20000,\n        expected_allowance: [],\n        expires_at: [],\n        spender: {\n          owner: Principal.fromText(MARKETPLACE_CANISTER),\n          subaccount: [],\n        },\n      });\n\n      console.log(\"apprive results :\",approveResults);\n      \n\n      let _days = getUnixTimestampInNanoseconds(expiryDate);\n\n      let res = await marketplaceActor?.place_offer_on_nft(\n        nftid,\n        Number(offerAmount * 1e8),\n        _days,\n      );\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"Offer place successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n      handleTrigger();\n\n      console.log(\"offer results here:\", res);\n    } catch (error) {\n      console.log(\"error in placing offer :\", error);\n    }\n\n  };\n\n  const { mutateAsync: HandleMakeOffer } = useMutation({\n    mutationFn: (e) => handleMakeOffer(e),\n    onSuccess: async () => {\n      setButtonLoading(false);\n    },\n  });\n\n  return (\n    <div className=\"flex bg-[#2c2d2e] w-1/2 rounded-lg mt-4 font-bold text-white justify-center items-center p-2 cursor-pointer\">\n      <button onClick={() => setOfferModalOpen(true)}>Make Offer</button>\n\n      {isOfferModalOpen && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Make Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setOfferModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={HandleMakeOffer}>\n              <label className=\"block mb-2\" htmlFor=\"price\">\n                Enter Offer amount\n              </label>\n              <input\n                type=\"number\"\n                id=\"price\"\n                placeholder=\"enter offer amount\"\n                value={offerAmount}\n                onChange={(e) => setOfferAmount(e.target.value)}\n                className=\" border border-white text-sm text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <input\n                type=\"number\"\n                id=\"price\"\n                value={expiryDate}\n                placeholder=\"enter number of days\"\n                onChange={(e) => setExpiryDate(e.target.value)}\n                className=\" border border-white text-sm text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Place Offer\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n\n\n      \n    </div>\n  );\n};\n\nexport default MakeOffer;\n","import React from 'react'\n\nconst SaleHistory = ({history}) => {\n  \n  const convertTime = (timestamp) => {\n    const date = new Date(Number(timestamp)/1e6);\n    return date.toLocaleString(); // Adjust options as needed\n};\n\n// Helper function to shorten addresses\nconst shortenAddress = (address) => {\n    return `${address?.slice(0, 6)}...${address?.slice(-4)}`;\n};\n\n  return (\n    <div className=\"overflow-x-auto bg-[#1B1B1B] p-2 rounded-lg border border-gray-400 h-[200px] md:h-[400px]\">\n      <h3 className='text-lg'>Activity</h3>\n    <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"\">\n            <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Buyer</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Seller</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Price</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Time</th>\n            </tr>\n        </thead>\n        <tbody className=\" divide-y divide-gray-200\">\n            {history?.length > 0 ? history?.map((item, index) => (\n                <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{shortenAddress(item?.buyer?.toString())}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{shortenAddress(item?.seller?.toString())}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{Number(item?.price)/1e8}</td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">{convertTime(item?.time)}</td>\n                </tr>\n            ))\n            :\n            <div className='text-xs flex justify-center items-center '>No activity available</div>\n          \n          }\n        </tbody> \n    </table>\n</div>\n  )\n}\n\nexport default SaleHistory\n\n\n\n// buyer: \"9ab3fc5674ae93846daa935812e6d9b36925b2c9810e03a9ebc5adddad634d93\"\n// price: 68000000n\n// seller: \"9ab3fc5674ae93846daa935812e6d9b36925b2c9810e03a9ebc5adddad634d93\"\n// time: 1730255389263606802n\n// token: \"cg7z3-4akor-uwiaa-aaaaa-cqace-eaqca-aaad4-a\"","import { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { createActor } from \"../../Utils/createActor\";\nimport { MARKETPLACE_CANISTER } from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { useNavigate } from \"react-router-dom\";\nconst Offers = ({ offers, nft, nftOwner, handleTrigger }) => {\n  const authenticatedAgent = useAgent();\n  const { user } = useIdentityKit();\n const navigate = useNavigate()\nconst queryClient = useQueryClient()\n\n  const [cancelModal, setCancelModal] = useState(false);\n  const [cancelLoading, setCancelLoading] = useState(false);\n  const [selectedOffer, setSelectedOffer] = useState(null);\n  const [acceptModal, setAcceptModal] = useState(false);\n  const [acceptLoading, setAcceptLoading] = useState(false);\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleAccept = async (offer, nft) => {\n    try {\n      setAcceptLoading(true)\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      if (!marketplaceActor || !selectedOffer) {\n        return;\n      }\n\n      console.log(\"selected offer :\",selectedOffer);\n      \n      let res = await marketplaceActor?.accept_offer(selectedOffer.nft,selectedOffer.offer.offer_id);\n      console.log(\"accept nft sale :\", res);\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT sold successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n\n      queryClient.setQueryData([\"refreshData\"], Math.random());\n\n      \n    } catch (error) {\n      console.log(\"error in accepting offer :\", error);\n    }\n\n    setAcceptLoading(false)\n     setAcceptModal(false)\n     navigate(\"/\")\n  };\n\n  const handleCancel = async () => {\n    try {\n      setCancelLoading(true);\n\n      let marketplaceActor = createActor(\n        MARKETPLACE_CANISTER,\n        marketIDL,\n        authenticatedAgent\n      );\n\n      if (!marketplaceActor || !selectedOffer) {\n        return;\n      }\n      console.log(selectedOffer);\n\n      let res = await marketplaceActor?.cancel_offer(\n        selectedOffer?.offer.offer_id,\n        selectedOffer?.nft\n      );\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"Offer cancelled successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n      handleTrigger();\n    } catch (error) {\n      console.log(\"error in canceling offer :\", error);\n    }\n    setCancelModal(false);\n    setCancelLoading(false);\n  };\n\n  const convertExpiryDate = (expiry) => {\n    const date = new Date(Number(expiry) / 1e6);\n    return date.toLocaleString(); // Adjust options as needed for formatting\n  };\n\n  const shortenAddress = (address) => {\n    return `${address?.slice(0, 6)}...${address?.slice(-4)}`;\n  };\n\n  return (\n    <div className=\"overflow-x-auto mb-10 bg-[#1B1B1B] p-2 rounded-lg border border-gray-400\">\n      {cancelModal && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg flex flex-col items-center justify-center gap-1 shadow-lg p-6 w-96\">\n            <div className=\"flex  w-full justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Cancel Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setCancelModal(false)}\n              />\n            </div>\n            <span>Proceed to cancel offer?</span>\n            {cancelLoading ? (\n              <ClipLoader color=\"white\" size={20} />\n            ) : (\n              <button\n                onClick={() => handleCancel()}\n                className=\"flex w-1/2 mt-2 justify-center items-center  bg-red-500 p-1 rounded-lg\"\n              >\n                Confirm\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {acceptModal && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-[#252525] rounded-lg flex flex-col items-center justify-center gap-1 shadow-lg p-6 w-96\">\n            <div className=\"flex  w-full justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Accept Offer</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setAcceptModal(false)}\n              />\n            </div>\n            <span>Confirm offer?</span>\n            {acceptLoading ? (\n              <ClipLoader color=\"white\" size={20} />\n            ) : (\n              <button\n                onClick={() => handleAccept()}\n                className=\"flex w-1/2 mt-2 justify-center items-center  bg-green-500 p-1 rounded-lg\"\n              >\n                Confirm\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      <h3 className=\"text-lg\">Offers</h3>\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"\">\n          <tr>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              User\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Amount\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Expiry Date\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Action\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\" divide-y divide-gray-200\">\n          {offers?.length >0 ?offers?.map((offer, index) => (\n            <tr key={index}>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {shortenAddress(offer?.user?.toString())}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {Number(offer?.amount) / 1e8} ICP\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {convertExpiryDate(Number(offer?.expiry_date))}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                <div className=\"flex flex-col items-center justify-center gap-1\">\n                  {user &&\n                    user?.principal?.toString() == offer?.user?.toString() && (\n                      <button\n                        // onClick={() => handleCancel(offer, nft)}\n                        onClick={() => {\n                          setSelectedOffer({ offer, nft });\n                          setCancelModal(true);\n                        }}\n                        className=\"flex  bg-red-500 p-1 rounded-lg\"\n                      >\n                        Cancel\n                      </button>\n                    )}\n\n                  {user && user?.principal?.toString() == nftOwner && (\n                    <button\n                      onClick={() => {\n                        setSelectedOffer({ offer, nft });\n                        setAcceptModal(true);\n                      }}\n                      className=\"flex bg-green-500 p-1 rounded-lg\"\n                    >\n                      Accept\n                    </button>\n                  )}\n                </div>\n              </td>\n            </tr>\n          )\n        ):\n        <div className=\"flex w-full justify-center items-center text-xs mt-3\"> No offers available</div>\n      \n      }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Offers;\n","import { useQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../collection/Card\";\n\nconst MoreNfts = ({ collectionID, nftID, nftPrice,nftDetails }) => {\n  const [moreNfts, setMoreNfts] = useState([]);\n  const { data: myTokens, isLoading: dataLoading } = useQuery({\n    queryKey: [\"myTokens\"],\n  });\n\n  // console.log(\"cccc :\", nftPrice);\n\n  //get the nfts from this nft that have the same price range as the nft being listed\n  useEffect(() => {\n    const getMoreNfts = async () => {\n      try {\n\n        console.log(\" gg sd :\",myTokens);\n        \n        let rangePrice = myTokens\n          ?.slice(0, 4);\n          \n          // .filter(\n          //   (nft) =>\n          //     (Number(nft[1].price) / 1e8).toFixed(2) > nftPrice - 0.2 &&\n          //     (Number(nft[1].price) / 1e8).toFixed(2) < nftPrice + 0.2 && nft[0] != nftID\n          // )\n\n\n        let cardNts = rangePrice?.map((nft, index) => (\n          <Card key={index} nft={nft} collectionID={collectionID} />\n        ));\nconsole.log(\"price range :\",rangePrice);\n\n        setMoreNfts(cardNts)\n      } catch (error) {\n        console.log(\"error in getting more nfts :\", error);\n      }\n    };\n    getMoreNfts();\n  }, [nftDetails]);\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <div className=\"flex w-full items-center justify-center\">\n        More NFTS from this collection\n      </div>\n      <div className=\"flex flex-col w-full\">\n        <div className=\"flex flex-row w-full\">\n          {/* Display the NFTs */}\n          <div className=\"flex-grow w-full flex mt-6 justify-center items-center flex-wrap\">\n          {moreNfts}\n          </div>\n        </div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default MoreNfts;\n","import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { computeExtTokenIdentifier } from \"../../Utils/tid\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { HttpAgent } from \"@dfinity/agent\";\nimport { idlFactory } from \"../../Utils/paws.did\";\nimport {\n  MARKETPLACE_CANISTER,\n  PAWS_ARENA_CANISTER,\n} from \"../../Utils/constants\";\nimport { idlFactory as marketIDL } from \"../../Utils/markeptlace.did\";\nimport { createActor } from \"../../Utils/createActor\";\nimport { IoEyeSharp } from \"react-icons/io5\";\nimport MakeOffer from \"./MakeOffer\";\n// import BuyNow from \"./BuyNFT\";\nimport useFecth from \"../../Utils/useFecth\";\nimport SaleHistory from \"./SaleHistory\";\nimport Offers from \"./Offers\";\nimport MoreNfts from \"./MoreNfts\";\nimport { AccountIdentifier } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport UnlistUpdate from \"../Unlist\";\nimport { useIdentityKit } from \"@nfid/identitykit/react\";\nimport UpdatePrice from \"./UpdatePrice\";\nimport { idlFactory as PawsIDL } from \"../../Utils/paws.did\";\nimport ICPLogo from \"../../assets/icplogo.png\";\nimport Skeleton from \"react-loading-skeleton\";\nimport \"react-loading-skeleton/dist/skeleton.css\";\nimport BuyNow from \"../BuyNow\";\n\n\nconst style = {\n  wrapper: `flex gap-3 mt-[80px] flex-col md:flex-row justify-center bg-[#121212] h-screen p-4 text-white`,\n  leftwrapper: `flex flex-col  items-center md:items-start  mb-4 md:mb-0`,\n  rightwrapper: `flex flex-col   h-full`,\n  nftImg: ` rounded-md ml-3 w-auto cursor-pointer`, // Responsive image height\n};\n\nconst ListedNFTDetails = () => {\n  const { colID, nftID } = useParams();\n  const [nftDetails, setNFTDetails] = useState(null);\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [listbuttonLoading, setListButtonLoading] = useState(false);\n  const [contentLoading, setContentLoading] = useState(false);\n\n  const [listTrigger, setTrigger] = useState(\"\");\n  const navigate = useNavigate();\n\n  const { user } = useIdentityKit();\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  const { data: myTokens, isLoading: dataLoading } = useQuery({\n    queryKey: [\"myTokens\"],\n  });\n\n  const { data: bulkData } = useQuery({\n    queryKey: [\"bulkData\"],\n  });\n\n  // const { data: nftActor } = useQuery({\n  //   queryKey: [\"nftActor\"],\n  // });\n\n  const HOST =\n    process.env.DFX_NETWORK !== \"ic\"\n      ? \"https://ic0.app\"\n      : \"http://localhost:4943\";\n\n  const agent = new HttpAgent({ host: HOST, retryTimes: 10 });\n\n  const nativeNftActor = createActor(colID, idlFactory, agent);\n  const marketActor = createActor(MARKETPLACE_CANISTER, marketIDL, agent);\n\n  const [saleHistory, setSaleHistory] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const { invalidateListings } = useFecth();\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const handleTrigger = (e) => setTrigger(Math.random());\n\n\n  const tokenIdentifier = useMemo(() => {\n    if (!colID || !nftID) return null;\n    return computeExtTokenIdentifier(nftID, colID);\n  }, [colID, nftID]);\n\n  const nftInfo = useMemo(() => {\n    return myTokens?.find((nft) => nft[0] == nftID);\n  }, [myTokens, nftID]);\n\n\n\n\n  useEffect(() => {\n    const fetchDetails = async () => {\n      try {\n        if (!colID || !nftID) return;\n        console.log(\"ddd\");\n\n        setContentLoading(true);\n\n        // let tokenIdentifier = computeExtTokenIdentifier(nftID, colID);\n        // let nftInfo = myTokens?.filter((nft) => nft[0] == nftID);\n\n        let nftActor = createActor(PAWS_ARENA_CANISTER, PawsIDL, agent);\n\n\n        // let res = await nftActor?.getMergedSVG(Number(nftID));\n        // console.log(\"res for the vector svg :\", res);\n\n        // const nftInfo = myTokens?.find((nft) => nft[0] == nftID);\n        let markTrans = await marketActor?.get_nft_sale_history(\n          tokenIdentifier\n        );\n        let tokenListings = bulkData?.find((det) => det[0] == colID);\n        let fil = tokenListings[1]?.transactions?.filter(\n          (tran) => tran?.token == tokenIdentifier\n        );\n\n        console.log(\"ccc :\", myTokens);\n        if (markTrans.data.length > 0) {\n          setSaleHistory([...fil, ...markTrans?.data[0]]);\n        } else {\n          setSaleHistory([...fil]);\n        }\n\n        if (nftInfo?.length > 0) {\n\n\n          //if the nft is not listed\n          if(nftInfo[1].hasOwnProperty('metadata')){\n\n            //get the owner of the nft\n\n            let _owner = await nftActor.ext_bearer(tokenIdentifier)\n            \n\n\n\n\n          }\n\n          //if the nft is listed on our marketplace\n          else if (nftInfo[1].inhouse_sale) {\n            //fetch all the details from the marketplace canister\n            let details = await marketActor?.get_listed_nft_details(\n              tokenIdentifier\n            );\n\n            if (details.status === 200 && details.status_text === \"Ok\") {\n              setNFTDetails(details.data[0]);\n            }\n          }\n          else {\n            //fetch the details from the nft canister itself\n            setNFTDetails({\n              seller_principal: nftInfo[1].seller?.toString(),\n              nft_price: nftInfo[1]?.price,\n              token_identifier: computeExtTokenIdentifier(nftInfo[0], colID),\n            });\n          }\n        }\n      } catch (error) {\n        console.log(\"error in fetching details :\", error);\n      }\n\n      setContentLoading(false);\n    };\n\n    fetchDetails();\n  }, [colID, nftID, listTrigger]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const { mutateAsync: HandleUnlist } = useMutation({\n    mutationFn: (e) => handleUnlist(e),\n    onSuccess: async () => {\n      invalidateListings();\n      navigate(\"../profile\");\n    },\n  });\n\n  const handleUnlist = async (e) => {\n    e.preventDefault();\n    if (!nftDetails) return;\n    setButtonLoading(true);\n\n    try {\n      let res = await marketplaceActor.un_list_nft(nftDetails.token_identifier);\n      console.log(\"unlisting res :\", res);\n\n      if (res.status == 200 && res.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT unlisted successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text[0], \"error\");\n      }\n    } catch (error) {\n      console.log(\"error in unlisting token :\", error);\n    }\n  };\n\n  const { mutateAsync: HandleUpdatePrice } = useMutation({\n    mutationFn: (e) => handleUpdatePrice(e),\n    onSuccess: async () => {\n      invalidateListings();\n      setButtonLoading(false);\n    },\n  });\n\n  const handleUpdatePrice = async (e) => {\n    e.preventDefault();\n\n    console.log(\"new price : \", newPrice);\n\n    if (!newPrice || newPrice == 0) return;\n    setListButtonLoading(true);\n    let res = await marketplaceActor?.update_nft_price(\n      nftDetails.token_identifier,\n      parseInt(newPrice * 1e8)\n    );\n\n    if (res.status == 200 && res.status_text == \"Ok\") {\n      displayNotificationModal(\"price updated successfully\", \"success\");\n    } else {\n      displayNotificationModal(res.error_text, \"error\");\n    }\n\n    console.log(\"update price results :\", res);\n\n    setListButtonLoading(false);\n  };\n\n  return (\n    <div className=\"flex w-full min-h-screen gap-4 flex-col text-white mr-6 pr-6 md:px-20 mt-[100px]\">\n      <div className=\"flex w-full h-full flex-col md:flex-row gap-2 mx-4\">\n        <div className=\"flex flex-col gap-4 w-full md:w-1/2 h-full md:items-start  mb-4 md:mb-0\">\n          <div className=\"rounded-lg p-1 w-full flex border border-gray-400 pt-3 flex-col\">\n            <img\n              src={`https://${colID}.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n                nftID,\n                colID\n              )}&type=thumbnail`}\n              alt=\"\"\n              className={style.nftImg}\n            />\n          </div>\n\n          <div className=\"flex flex-col w-full items-start\">\n            <h1>Traits</h1>\n            <span className=\"text-sm\">Coming Soon ...</span>\n          </div>\n        </div>\n        <div className=\"flex  justify flex-col w-full md:w-1/2 \">\n          <div className=\"flex flex-col gap-3\">\n            <h1 className=\"text-[30px] font-bold\">\n              {/*  corded nft collection */}\n              {nftDetails && \"ICKitties\"} # {nftID}\n            </h1>\n            <span>Owned by {nftDetails?.seller_principal?.toString()}</span>\n            {/* <div className=\"flex gap-1  text-sm\">\n              <span>{<IoEyeSharp size={25} color=\"gray\" />}</span>\n              <span>20 views</span>\n            </div> */}\n\n            {\n              nftDetails?.nft_price && \n\n\n            <div className=\"flex flex-col  xs:px-3 md:px-0 gap-4 w-full\">\n              <div className=\"flex  flex-col w-full gap-1  bg-[#1B1B1B] border border-gray-400 p-2 rounded-lg\">\n                <h3>Current Price</h3>\n                <div className=\"flex flex-row gap-1\">\n                  <img src={ICPLogo} height=\"7px\" width=\"15px\" />\n\n                  <span className=\"flex text-lg\">\n                    {nftDetails &&\n                      (Number(nftDetails?.nft_price) / 1e8).toFixed(2)}\n                  </span>\n                </div>\n\n                {contentLoading ? (\n                  <div className=\"flex w-full justify-center items-center\">\n\n                    <ClipLoader size={20} color=\"white\"/>\n\n                  </div>\n                ) : user &&\n                  user.principal.toString() ==\n                    nftDetails?.seller_principal?.toString() ? (\n                  <div className=\"flex flex-row gap-4 justify-center items-center w-full\">\n                    <UnlistUpdate nft={nftDetails?.token_identifier} />\n                    <UpdatePrice\n                      nft={nftDetails?.token_identifier}\n                      handleTrigger={handleTrigger}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-row gap-4 w-full\">\n                    <BuyNow\n                      nft_price={Number(nftDetails?.nft_price)}\n                      nftid={nftDetails?.token_identifier}\n                    />\n\n                    <MakeOffer\n                      nft_price={Number(nftDetails?.nft_price)}\n                      nftid={nftDetails?.token_identifier}\n                      handleTrigger={handleTrigger}\n                    />\n                  </div>\n                )}\n              </div>\n\n              <SaleHistory history={saleHistory} />\n              <Offers\n                offers={nftDetails?.offers}\n                nft={nftDetails?.token_identifier}\n                nftOwner={nftDetails?.seller_principal?.toString()}\n                handleTrigger={handleTrigger}\n              />\n            </div>\n\n          }\n\n\n\n\n          </div>\n        </div>\n      </div>\n      {nftDetails && (\n        <MoreNfts\n          nftDetails={nftDetails}\n          collectionID={colID}\n          nftID={nftID}\n          nftPrice={Number(nftDetails?.nft_price) / 1e8}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListedNFTDetails;\n","import React from \"react\";\nimport BuyNow from \"../BuyNow\";\nimport { computeExtTokenIdentifier } from \"../../Utils/tid\";\nimport { useNavigate } from \"react-router-dom\";\nimport ICPlogo from \"../../assets/icplogo.png\"\n\nconst Card = ({ collectionID, nft }) => {\n const navigate = useNavigate()\n    return (\n    <div\n      key={nft.id}\n      className=\" rounded bg-[#202020] w-[250px] m-2 rounded-b-lg\"\n    >\n      <img\n        onClick={() =>\n          navigate(`../marketplace/` + collectionID + \"/\" + nft[0])\n        }\n        src={`https://${collectionID}.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n          nft[0],\n          collectionID\n        )}&type=thumbnail`}\n        alt={`NFT`}\n        className=\"w-[100%] ml-[2.5px] cursor-pointer  object-cover rounded mb-2\"\n      />\n      <div className=\"flex w-full px-2 justify-between\">\n        <p>#{nft[0]}</p>\n      \n\n          {\n            nft[1]?.price\n            ?\n        <div className=\"flex gap-1\">\n          <img src={ICPlogo} height=\"7px\" width=\"15px\" alt=\"logo\" />\n          <span>\n           { (Number(nft[1]?.price) / 1e8)?.toFixed(2)}\n\n          </span>\n            \n            \n        </div>\n            : \"unlisted\"}\n            \n      </div>\n      <div\n        className={`opacity-0 ${\n          nft[1].price != undefined && \"hover:opacity-100\"\n        } transition-opacity duration-300`}\n      >\n        <BuyNow\n          nftid={nft[0]}\n          nft_price={Number(nft[1].nft_price)}\n          userP={nft[1].seller_principal}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["_ref","nftid","nft_price","userP","isLoading","setIsLoading","useState","showModal","setShowModal","modalMessage","setModalMessage","modalType","setModalType","invalidateListings","invalidateUserNfts","invalidateUserBalance","useFecth","authenticatedAgent","useAgent","user","useIdentityKit","displayNotificationModal","async","_message","_type","setTimeout","navigate","useNavigate","mutateAsync","HandleBuy","useMutation","mutationFn","handleBuy","onSuccess","marketplaceActor","createActor","MARKETPLACE_CANISTER","marketIDL","IcpActor","MY_LEDGER_CANISTER_ID","ICPDL","approveResults","icrc2_approve","fee","memo","from_subaccount","created_at_time","amount","Number","expected_allowance","expires_at","spender","owner","Principal","fromText","subaccount","console","log","res","buy_nft","status","status_text","error_text","error","_jsxs","_Fragment","children","_jsx","className","onClick","ClipLoader","size","color","handleTrigger","isOfferModalOpen","setOfferModalOpen","buttonLoading","setButtonLoading","offerAmount","setOfferAmount","expiryDate","setExpiryDate","retryTimes","HandleMakeOffer","e","preventDefault","_days","getUnixTimestampInNanoseconds","place_offer_on_nft","handleMakeOffer","CgClose","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","required","history","shortenAddress","address","slice","length","map","item","index","_item$buyer","_item$seller","timestamp","buyer","toString","seller","price","time","Date","toLocaleString","offers","nft","nftOwner","queryClient","useQueryClient","cancelModal","setCancelModal","cancelLoading","setCancelLoading","selectedOffer","setSelectedOffer","acceptModal","setAcceptModal","acceptLoading","setAcceptLoading","cancel_offer","offer","offer_id","handleCancel","accept_offer","setQueryData","Math","random","handleAccept","_offer$user","_user$principal","_offer$user2","_user$principal2","expiry","expiry_date","principal","collectionID","nftID","nftPrice","nftDetails","moreNfts","setMoreNfts","data","myTokens","dataLoading","useQuery","queryKey","useEffect","rangePrice","cardNts","Card","getMoreNfts","style","wrapper","leftwrapper","rightwrapper","nftImg","ListedNFTDetails","_nftDetails$seller_pr","_nftDetails$seller_pr2","_nftDetails$seller_pr3","colID","useParams","setNFTDetails","newPrice","setNewPrice","isModalOpen","setIsModalOpen","listbuttonLoading","setListButtonLoading","contentLoading","setContentLoading","listTrigger","setTrigger","bulkData","HOST","process","DFX_NETWORK","agent","HttpAgent","host","marketActor","idlFactory","saleHistory","setSaleHistory","tokenIdentifier","useMemo","computeExtTokenIdentifier","nftInfo","find","_tokenListings$","_tokenListings$$trans","nftActor","PAWS_ARENA_CANISTER","PawsIDL","markTrans","get_nft_sale_history","fil","det","transactions","filter","tran","token","hasOwnProperty","ext_bearer","inhouse_sale","details","get_listed_nft_details","_nftInfo$1$seller","_nftInfo$","seller_principal","token_identifier","fetchDetails","HandleUnlist","handleUnlist","un_list_nft","HandleUpdatePrice","handleUpdatePrice","update_nft_price","parseInt","src","alt","ICPLogo","height","width","toFixed","UnlistUpdate","UpdatePrice","BuyNow","MakeOffer","SaleHistory","Offers","MoreNfts","_nft$","_ref2","_nft$2","ICPlogo","undefined","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","mutation","observer","mutationKey","hashKey","state","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","getCurrentResult","variables","build","addObserver","execute","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","onSettled","onError","listeners","forEach","listener","React","result","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError"],"sourceRoot":""}