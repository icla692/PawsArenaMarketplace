{"version":3,"file":"static/js/762.b6453391.chunk.js","mappings":"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","sources":["components/ListNFT.jsx","components/TransferNFT.jsx","components/TransferICP.jsx","pages/Profile/SearchP.jsx","pages/Profile/DisplayNFTs.jsx","pages/Profile/ActivityTable.jsx","pages/Profile.jsx"],"sourcesContent":["import { Principal } from \"@dfinity/principal\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { CgClose } from \"react-icons/cg\";\nimport { ClipLoader } from \"react-spinners\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport { MARKETPLACE_CANISTER, PAWS_ARENA_CANISTER } from \"../Utils/constants\";\nimport useFecth from \"../Utils/useFecth\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { createActor } from \"../Utils/createActor\";\nimport { idlFactory as marketIDL } from \"../Utils/markeptlace.did\";\nimport { idlFactory as PawsIDL } from \"../Utils/paws.did\";\nconst ListNFT = ({ nft,handleTrigger }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [newPrice, setNewPrice] = useState(0);\n  const [buttonLoading, setButtonLoading] = useState(false);\nconst queryClient = useQueryClient()\n\nconst {invalidateListings} = useFecth()\nconst authenticatedAgent = useAgent()\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const {user} = useIdentityKit()\n \n\n  const { mutateAsync: HandleList } = useMutation({\n    mutationFn: (e) => handleList(e),\n    onSuccess: async () => {\n       invalidateListings()\n      setButtonLoading(false);\n    },\n  });\n\n\n\n\n  const handleList = async (e) => {\n    e.preventDefault()\n\n    \n    if ( !user || !nft || !authenticatedAgent) return;\n\n    let marketplaceActor = createActor(\n      MARKETPLACE_CANISTER,\n      marketIDL,\n      authenticatedAgent\n    );\n\n    let nftActor = createActor(PAWS_ARENA_CANISTER,PawsIDL,authenticatedAgent)\n\n\n    if (newPrice == 0) {\n      alert(\"price is zero\");\n      return;\n    }\n    // if (!window.confirm(\"Are you sure you want to list the NFT?\")) return;\n\n    setButtonLoading(true);\n    try {\n      // Call the init function on the marketplace with specified price\n      let initRes = await marketplaceActor?.init_list_nft(\n        user.principal,\n        nft.nftid,\n        { Kitties: null },\n        parseInt(newPrice * 1e8) // Convert ICP to subunits\n      );\n      console.log(\"init res:\", initRes);\n\n      let tokenIdentifier = computeExtTokenIdentifier(\n        nft.nftid,\n        nft.canister_id\n      );\n      let transferRes = await nftActor?.transfer({\n        amount: parseInt(1),\n        from: { principal: user.principal },\n        memo: [],\n        notify: false,\n        subaccount: [],\n        to: { principal: Principal.fromText(MARKETPLACE_CANISTER) },\n        token: tokenIdentifier,\n      });\n\n      console.log(\"transfer result:\", transferRes);\n\n      let res = await marketplaceActor?.complete_listing(\n        user?.principal,\n        nft.nftid,\n        { Kitties: null }\n      );\n      console.log(\"final listing:\", res);\n\n      // if (fin.status === 200 && fin.status_text === \"Ok\") {\n      //   alert(\"NFT listed successfully\");\n      // } else {\n      //   alert(fin.status_error);\n      // }\n      if (res?.status == 200 && res?.status_text == \"Ok\") {\n        displayNotificationModal(\"NFT listed successfully\", \"success\");\n      } else {\n        displayNotificationModal(res.error_text, \"error\");\n      }\n    } catch (error) {\n      console.log(\"Error in listing NFT:\", error);\n    }\n\n    queryClient.setQueryData([\"refreshData\"], Math.random());\n\n    // handleTrigger()\n  };\n\n  return (\n    <div className=\"relative flex-row gap-1 flex w-full font-bold text-white justify-center items-center p-2 \">\n      <button \n\nclassName=\"flex bg-gray-300 w-full border mt-4 font-bold text-black justify-center items-center p-2\"\n      \n      onClick={() => setIsModalOpen(true)}>List</button>\n\n      {isModalOpen && (\n        <div className=\"fixed inset-0 p-4 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">List NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={HandleList}>\n              <label className=\"block mb-2\" htmlFor=\"price\">\n                Enter listing price\n              </label>\n              <input\n                type=\"number\"\n                id=\"price\"\n                value={newPrice}\n                onChange={(e) => setNewPrice(e.target.value)}\n                className=\" border border-white text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Confirm listing\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n\n\n\n      )}\n    </div>\n  );\n};\n\nexport default ListNFT;\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport useFecth from \"../Utils/useFecth\";\nimport { ClipLoader } from \"react-spinners\";\nimport { CgClose } from \"react-icons/cg\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport { MARKETPLACE_CANISTER, PAWS_ARENA_CANISTER } from \"../Utils/constants\";\nimport { Principal } from \"@dfinity/principal\";\nimport { createActor } from \"../Utils/createActor\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { idlFactory as PawsIDL } from \"../Utils/paws.did\";\nconst TransferNFT = ({ nft, handleTrigger }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isPreviewOpen, setPreviewOpen] = useState(false);\n  const [recipient, setRecipient] = useState(\"\");\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n  const { invalidateListings } = useFecth();\n  const authenticatedAgent = useAgent();\n  const { user } = useIdentityKit();\n\n  const queryClient = useQueryClient();\n  //modals for the notification popup\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\n\n  //function to toggle the notification on and off display\n  const displayNotificationModal = async (_message, _type) => {\n    setModalMessage(_message);\n    setModalType(_type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  const { mutateAsync: HandleTransfer } = useMutation({\n    mutationFn: (e) => handleTransfer(e),\n    onSuccess: async () => {\n      invalidateListings();\n      setButtonLoading(false);\n    },\n  });\n\n  const handleTransfer = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n    console.log(\"nft :\", nft);\n\n    let nftActor = createActor(\n      PAWS_ARENA_CANISTER,\n      PawsIDL,\n      authenticatedAgent\n    );\n\n    if (!nftActor || !nft)\n      displayNotificationModal(\"please login first\", \"success\");\n    //get the token identifier of the nft\n    let tokenIdentifier = computeExtTokenIdentifier(\n      Number(nft.nftid),\n      nft.canister_id\n    );\n\n    try {\n      let transferResults = await nftActor.transfer({\n        amount: parseInt(1),\n        from: { principal: user.principal },\n        memo: [],\n        notify: false,\n        subaccount: [],\n        to: { address: recipient },\n        token: tokenIdentifier,\n      });\n\n      if (transferResults.ok) {\n        displayNotificationModal(\"NFT transfer successful\", \"success\");\n      } else {\n        displayNotificationModal(transferResults.err, \"error\");\n      }\n\n      console.log(\"transfer success\", transferResults);\n    } catch (error) {\n      console.log(\"error in transfering nft :\", error);\n    }\n\n    queryClient.setQueryData([\"refreshData\"], Math.random());\n\n    setButtonLoading(false);\n    // handleTrigger();\n  };\n\n  return (\n    <div className=\"relative flex-row gap-1 flex w-full font-bold text-white justify-center items-center p-2 \">\n      <button\n        className=\"flex border bg-slate-300 w-full mt-4 font-bold text-black justify-center items-center p-2\"\n        onClick={() => setIsModalOpen(true)}\n      >\n        Transfer\n      </button>\n\n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {showModal && (\n            <div\n              className={`absolute top-10 text-xs z-50  left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${\n                modalType === \"success\"\n                  ? \"bg-green-100 text-green-800 border border-green-300 rounded-lg p-1 animate-slide-in\"\n                  : \"bg-red-100 text-red-800 border border-red-300 rounded-lg p-1 animate-slide-in\"\n              }`}\n            >\n              <div className=\"modal-message\">\n                <p>{modalMessage}</p>\n              </div>\n            </div>\n          )}\n          <div className=\"bg-[#252525] rounded-lg shadow-lg p-6 w-96\">\n            <div className=\"flex justify-between \">\n              <h2 className=\"text-xl font-bold mb-4\">Transfer NFT</h2>\n              <CgClose\n                className=\"cursor-pointer\"\n                onClick={() => setIsModalOpen(false)}\n              />\n            </div>\n\n            <form onSubmit={handleTransfer}>\n              <input\n                type=\"text\"\n                id=\"recipient\"\n                placeholder=\"enter recipient account\"\n                value={recipient}\n                onChange={(e) => setRecipient(e.target.value)}\n                className=\" border border-white text-black rounded p-1 w-full mb-4\"\n                required\n              />\n              <div className=\"flex justify-end\">\n                {buttonLoading ? (\n                  <ClipLoader color=\"white\" size={20} />\n                ) : (\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-white text-black rounded\"\n                  >\n                    Transfer\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TransferNFT;\n","import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport useFetch from \"../Utils/useFecth\"; // Fixed typo in import\nimport { ClipLoader } from \"react-spinners\";\nimport { CgClose } from \"react-icons/cg\";\nimport { Principal } from \"@dfinity/principal\";\nimport { useAgent, useIdentityKit } from \"@nfid/identitykit/react\";\nimport { MY_LEDGER_CANISTER_ID } from \"../Utils/constants\";\nimport {idlFactory as ICPDL} from \"../Utils/icptoken.did\";\nimport { createActor } from \"../Utils/createActor\";\nimport { PiHandWithdrawBold } from \"react-icons/pi\";\n\n\n\nconst TransferICP = () => {\n  // State variables\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [recipient, setRecipient] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [isPreviewOpen, setPreviewOpen] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState(\"\"); // \"success\" or \"error\"\nconst {user} = useIdentityKit()\nconst authenticatedAgent = useAgent()\nconst queryClient = useQueryClient()\n  // Fetch data using React Query\n  const { invalidateListings, invalidateUserNfts, invalidateUserBalance } = useFetch();\n\n  const { data: userIcpBalance } = useQuery({queryKey:[\"userIcpBalance\"]});\n  const { data: IcpActor } = useQuery({queryKey:[\"IcpActor\"]});\n\n\n\n  // const { data: userPrincipal } = useQuery({\n  //   queryKey: [\"userPrincipal\"],\n  // });\n\n  // Mutation for handling withdrawal\n  const { mutateAsync: handleWithdraw } = useMutation({\n    mutationFn: (e) => processWithdraw(e),\n    onSuccess: async () => {\n      invalidateListings();\n      invalidateUserNfts();\n      invalidateUserBalance();\n      setButtonLoading(false);\n    },\n  });\n\n  // Function to display notification modal\n  const displayNotificationModal = (message, type) => {\n    setModalMessage(message);\n    setModalType(type);\n    setShowModal(true);\n    setTimeout(() => setShowModal(false), 3000);\n  };\n\n  // Function to process withdrawal\n  const processWithdraw = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n\n    if (!authenticatedAgent) {return};\n\n    try {\n\n      const IcpActor = createActor(MY_LEDGER_CANISTER_ID, ICPDL, authenticatedAgent);\n\n\n\n\n      \n      const transferResults = await IcpActor.icrc1_transfer({\n        to: { owner: Principal.fromText(recipient), subaccount: [] },\n        fee: [],\n        memo: [],\n        from_subaccount: [],\n        created_at_time: [],\n        amount: Number(amount) * 1e8,\n      });\n      \n      console.log(\"dddd2\",transferResults);\n      if (transferResults.Ok) {\n        displayNotificationModal(\"ICP transfer successful\", \"success\");\n      } else {\n        displayNotificationModal(transferResults.Err, \"error\");\n      }\n\n    } catch (error) {\n      console.error(\"Error in sending ICP:\", error);\n      displayNotificationModal(\"An error occurred during the transfer\", \"error\");\n    }\n    \n\n    queryClient.setQueryData([\"refreshData\"], Math.random());\n\n    setButtonLoading(false);\n  };\n\n  // Function to handle preview action\n  const handlePreview = (e) => {\n    e.preventDefault();\n    setPreviewOpen(true);\n  };\n\n  // Function to shorten addresses for display\n\n  return (\n    <div className=\"relative flex flex-row gap-1 text-white justify-center items-center p-2\">\n      <div className=\"flex flex-col justify-center items-center\">\n        {/* <button className=\"px- py-2 bg-white text-black rounded\" onClick={() => setIsModalOpen(true)}>\n          Withdra\n        </button> */}\n\n        <PiHandWithdrawBold size={20} className=\"cursor-pointer\" onClick={()=>setIsModalOpen(true)} />\n        {/* <span>{userIcpBalance && userIcpBalance} ICP</span> */}\n      </div>\n\n      {/* Modal for withdrawal */}\n      {isModalOpen && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50\">\n          {/* Notification Modal */}\n          {showModal && (\n            <div className={`absolute text-xs top-10 z-50 left-1/2 transform -translate-x-1/2 transition-transform duration-500 ease-out ${modalType === \"success\" ? \"bg-green-100 text-green-800 border border-green-300\" : \"bg-red-100 text-red-800 border border-red-300\"} rounded-lg p-1`}>\n              <p>{modalMessage}</p>\n            </div>\n          )}\n\n          {/* Preview or Input Form */}\n          {isPreviewOpen ? (\n            <PreviewSection \n              recipient={recipient}\n              amount={amount}\n              buttonLoading={buttonLoading}\n              onWithdraw={handleWithdraw}\n              onClose={() => {\n                setIsModalOpen(false);\n                setPreviewOpen(false);\n              }}\n            />\n          ) : (\n            <InputSection \n              recipient={recipient}\n              amount={amount}\n              buttonLoading={buttonLoading}\n              onPreview={handlePreview}\n              onRecipientChange={setRecipient}\n              onAmountChange={setAmount}\n              onClose={() => setIsModalOpen(false)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Component for Input Form\nconst InputSection = ({ recipient, amount, buttonLoading, onPreview, onRecipientChange, onAmountChange, onClose }) => (\n  <div className=\"bg-[#252525] rounded-lg text-sm shadow-lg p-6 w-96\">\n    <div className=\"flex justify-between\">\n      <h2 className=\"mb-4\">Withdraw ICP</h2>\n      <CgClose className=\"cursor-pointer\" onClick={onClose} />\n    </div>\n\n    <form onSubmit={onPreview}>\n      <input\n        type=\"text\"\n        id=\"recipient\"\n        value={recipient}\n        placeholder=\"Enter principal\"\n        onChange={(e) => onRecipientChange(e.target.value)}\n        className=\"border border-white text-black rounded p-1 w-full mb-4\"\n        required\n      />\n      <input\n        type=\"number\"\n        id=\"amount\"\n        value={amount}\n        placeholder=\"Enter amount\"\n        onChange={(e) => onAmountChange(e.target.value)}\n        className=\"border border-white text-black rounded p-1 w-full mb-4\"\n        required\n      />\n      <div className=\"flex justify-end\">\n        {buttonLoading ? (\n          <ClipLoader color=\"white\" size={20} />\n        ) : (\n          <button type=\"submit\" className=\"px-4 py-2 bg-white text-black rounded\">\n            Preview\n          </button>\n        )}\n      </div>\n    </form>\n  </div>\n);\nconst shortenAddress = (address) => `${address.slice(0, 15)}...${address.slice(-10)}`;\n\n// Component for Preview Section\nconst PreviewSection = ({ recipient, amount, buttonLoading, onWithdraw, onClose }) => (\n  <div className=\"bg-[#252525] text-sm rounded-lg shadow-lg p-6 w-96\">\n    <div className=\"flex justify-between\">\n      <h2 className=\"text-xl border-b w-full mb-4\">Withdraw Preview</h2>\n      <CgClose className=\"cursor-pointer\" onClick={onClose} />\n    </div>\n\n    <div className=\"flex text-sm flex-col gap-1 w-full\">\n      <DetailItem label=\"Destination:\" value={shortenAddress(recipient)} />\n      <DetailItem label=\"Amount:\" value={`${amount} ICP`} />\n      <DetailItem label=\"Fee:\" value=\"0.0001 ICP\" />\n    </div>\n\n    <div className=\"flex mt-3 justify-end\">\n      {buttonLoading ? (\n        <ClipLoader color=\"white\" size={20} />\n      ) : (\n        <button onClick={onWithdraw} className=\"px-4 py-2 bg-white text-black rounded\">\n          Send\n        </button>\n      )}\n    </div>\n  </div>\n);\n\n// Component for displaying detail items in the preview section\nconst DetailItem = ({ label, value }) => (\n  <div className=\"flex flex-col\">\n    <span>{label}</span>\n    <span className=\"flex text-gray-400\">{value}</span>\n  </div>\n);\n\nexport default TransferICP;","import React, { useState } from \"react\";\n\nconst SearchP = ({selectedTab,handleTabClick}) => {\n  \n\n  const tabStyle = (tab) =>\n    `cursor-pointer p-2  ${\n      selectedTab === tab ? \" text-white border-b-4 border-blue-500\" : \"bg-transparent\"\n    }`;\n\n  return (\n    <div className=\"flex flex-col w-full border-b-2 mt-6 rounded-md\">\n      <div className=\"flex flex-row w-full justify-evenly items-center gap-4\">\n        <div\n          className={tabStyle(\"Collected\")}\n          onClick={() => handleTabClick(\"Collected\")}\n        >\n          Collected\n        </div>\n        <div\n          className={tabStyle(\"Selling\")}\n          onClick={() => handleTabClick(\"Selling\")}\n        >\n          Selling\n        </div>\n        <div\n          className={tabStyle(\"Offers\")}\n          onClick={() => handleTabClick(\"Offers\")}\n        >\n          Offers\n        </div>\n        <div\n          className={tabStyle(\"Activity\")}\n          onClick={() => handleTabClick(\"Activity\")}\n        >\n          Activity\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchP;","import React from 'react'\n\nconst ProfileNftDisplay = ({results}) => {\n  return (\n    <div className=\"flex  w-full  text-white gap-3  border-gray-400 p-2\">\n          <div className=\"hidden md:flex justify-center w-1/4\">\n            <div className=\"flex t flex-col border-r-2 px-4 \">\n              <h2 className='text-2xl'>Collections</h2>\n              <div>\n                IC Kitties\n              </div>\n            </div>\n          </div>\n      <div className=\"flex flex-col w-full\">\n        <div className=\"flex flex-row w-full\">\n          <div className=\"flex-grow w-full flex  justify-center items-center flex-wrap\">\n            {results}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileNftDisplay\n","import React from \"react\";\nimport {\n  convertExpiryDate,\n  getTokenIndex,\n  shortenAddress,\n} from \"../../Utils/tid\";\n\n\nconst ActivityTable = ({ transactions, selectedCollection }) => {\n  return (\n    <div className=\" mb-10 overflow-x-auto w-full mt-10  p-2 h-[600px] rounded-lg  border-gray-400\">\n\n    <table className=\"min-w-full divide-y divide-gray-200\">\n      <thead>\n        <tr>\n          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            NFT\n          </th>\n          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            From\n          </th>\n          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            To\n          </th>\n          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            Amount\n          </th>\n          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            Date\n          </th>\n        </tr>\n      </thead>\n      <tbody className=\" divide-y divide-gray-200\">\n        {transactions?.length > 0 ? (\n          transactions?.slice(0,15)?.map((trans, index) => (\n            <tr key={index}>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                <img\n                  src={`https://${selectedCollection}.raw.icp0.io/?tokenid=${trans?.token}&type=thumbnail`}\n                  alt=\"\"\n                  height={40}\n                  width={40}\n                  />\n                #{getTokenIndex(trans?.token, selectedCollection)}\n              </td>\n\n              {/* `https://${\n                        nft.canister_id\n                      }.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n                        nft.nftid,\n                        nft.canister_id\n                      )}&type=thumbnail`} */}\n\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {shortenAddress(trans?.seller?.toString())}\n              </td>\n\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {shortenAddress(trans?.buyer)}\n              </td>\n\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {Number(trans?.price) / 1e8}\n              </td>\n\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {convertExpiryDate(trans?.time)}\n              </td>\n\n              {/* <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                {Number(offer?.amount) / 1e8} ICP\n                //   </td> */}\n              {/* //   <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n            //     {convertExpiryDate(Number(offer?.expiry_date))}\n            //   </td> */}\n              {/* <td className=\"px-6 py-4 whitespace-nowrap text-sm text-white\">\n                <div className=\"flex flex-col items-center justify-center gap-1\">\n                {user &&\n                user?.principal?.toString() == offer?.user?.toString() && (\n                  <button\n                  // onClick={() => handleCancel(offer, nft)}\n                  onClick={() => {\n                    setSelectedOffer({ offer, nft });\n                    setCancelModal(true);\n                    }}\n                    className=\"flex  bg-red-500 p-1 rounded-lg\"\n                    >\n                    Cancel\n                    </button>\n                    )}\n                    \n                    {user && user?.principal?.toString() == nftOwner && (\n                      <button\n                      onClick={() => {\n                        setSelectedOffer({ offer, nft });\n                        setAcceptModal(true);\n                        }}\n                        className=\"flex bg-green-500 p-1 rounded-lg\"\n                        >\n                      Accept\n                    </button>\n                  )}\n                </div>\n              </td> */}\n            </tr>\n          ))\n        ) : (\n          <div className=\"flex w-full justify-center items-center text-xs mt-3\">\n            \n            No activity available\n          </div>\n        )}\n      </tbody>\n    </table>\n        </div>\n  );\n};\n\nexport default ActivityTable;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { QRCodeCanvas as QRCode } from \"qrcode.react\";\nimport pawsarena from \"../assets/pawsarena.png\"; // Placeholder for profile picture\nimport { AiOutlineCopy } from \"react-icons/ai\"; // Import copy icon\nimport { AccountIdentifier } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport { computeExtTokenIdentifier } from \"../Utils/tid\";\nimport UnlistUpdate from \"./Unlist\";\nimport ListNFT from \"../components/ListNFT\";\nimport { useNavigate } from \"react-router-dom\";\nimport TransferNFT from \"../components/TransferNFT\";\nimport TransferICP from \"../components/TransferICP\";\nimport { useIdentityKit } from \"@nfid/identitykit/react\";\nimport UpdatePrice from \"./ListedNFT/UpdatePrice\";\nimport { ClipLoader } from \"react-spinners\";\nimport SearchP from \"./Profile/SearchP\";\nimport NftDisplay from \"./Profile/DisplayNFTs\";\nimport ActivityTable from \"./Profile/ActivityTable\";\n\nconst style = {\n  wrapper: `flex mt-[80px] min-h-screen bg-[#121212] flex-col w-full items-center px-[1.2rem] md:px-[4.2rem] py-4 text-white`,\n  profileSection: `flex flex-col border rounded-lg w-full max-w-3xl max-h-2xl mb-6 `,\n  addressContainer: `flex flex-row gap-2 items-center justify-center mt-8`,\n  address: `  mt-20 mb-2 text-center`,\n  balance: `text-md text-[#8a939b] mb-4`,\n  qrCodeContainer: `flex flex-col items-center`,\n  qrCodeLabel: `text-md font-semibold mb-2`,\n  nftsSection: `w-full  rounded-lg p-4`,\n  nftGrid: `flex flex-wrap justify-center gap-1`, // Grid layout for NFTs\n\n  nftCard: `bg-[#212121] w-[200px] mb-3 rounded-md  overflow-hidden relative`, // Added relative positioning\n  nftImg: `w-[200px] h-48 ml-[3px] mt-[3px] rounded-t-md cursor-pointer object-cover`, // Removed redundant w-full\n  info: `flex justify-between text-white drop-shadow-xl ml-2 mr-2`,\n  infoLeft: `flex-0.6 flex-wrap`,\n  assetName: `font-bold mt-1`, // Responsive text sizes\n  buttonsContainer: `absolute bottom-6 left-0 right-0 flex flex-row  justify-center items-center`, // Hidden by default\n};\nconst Profile = () => {\n  const [userNFTList, setuserNFTList] = useState(null);\n\n  const [collectedNFTS, setCollectedNFTS] = useState([]);\n  const [listedNFTS, setListedNFTS] = useState([]);\n\n  const [userAccount, setUserAccount] = useState(null);\n  const [trigger, setTrigger] = useState(\"\");\n  const { user } = useIdentityKit();\n  const { data: userPrincipal } = useQuery({\n    queryKey: [\"userPrincipal\"],\n  });\n\n  const { data: refreshData } = useQuery({\n    queryKey: [\"refreshData\"],\n  });\n\n  const { data: userIcpBalance } = useQuery({\n    queryKey: [\"userIcpBalance\"],\n  });\n\n  const { data: marketplaceActor } = useQuery({\n    queryKey: [\"marketplaceActor\"],\n  });\n\n  const { data: nftActor } = useQuery({\n    queryKey: [\"nftActor\"],\n  });\n\n  const { data: bulkData } = useQuery({\n    queryKey: [\"bulkData\"],\n  });\n\n  const { data: IcpActor } = useQuery({ queryKey: [\"IcpActor\"] });\n\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!userPrincipal) return;\n    let res = AccountIdentifier.fromPrincipal({\n      principal: Principal.fromText(userPrincipal),\n      subAccount: undefined,\n    }).toHex();\n    console.log(res);\n    setUserAccount(res);\n  }, [userPrincipal]);\n\n  useEffect(() => {\n    const fetchUserListedNFTS = async () => {\n      try {\n        let collected = [];\n        let listed = [];\n        if (!userPrincipal || !marketplaceActor) return;\n        let res = await marketplaceActor?.get_all_user_listed_nfts(\n          Principal.fromText(userPrincipal)\n        );\n\n        console.log(\"heeee :\", res.data[0]);\n\n        if (\n          res.status == 200 &&\n          res.status_text == \"Ok\" &&\n          res.data[0].length > 0\n        ) {\n          for (const data of res.data[0]) {\n            if (data.isConfirmed === true) {\n              listed.push({\n                nftid: data.nft_id,\n                type: \"Listed\",\n                canister_id: data.nft_canister,\n                collectionName: Object.keys(data.nft_category)[0],\n              });\n            }\n          }\n        }\n\n        let accIdentifier = AccountIdentifier.fromPrincipal({\n          principal: Principal.fromText(userPrincipal),\n          subAccount: undefined,\n        }).toHex();\n\n        let ownedTokens = await nftActor?.tokens(accIdentifier);\n\n        let tokens = Array.from(ownedTokens?.ok);\n        console.log(\"ahaha :\", tokens);\n\n        if (tokens && tokens.length > 0) {\n          for (const data of tokens) {\n            collected.push({\n              nftid: data,\n              type: \"Owned\",\n              canister_id: \"rw7qm-eiaaa-aaaak-aaiqq-cai\",\n              collectionName: \"Kitties\",\n            });\n          }\n        }\n        setCollectedNFTS(collected);\n        setListedNFTS(listed);\n      } catch (error) {\n        console.log(\"error in fetching user listed NFTs\", error);\n      }\n    };\n\n    fetchUserListedNFTS();\n  }, [user, trigger, refreshData]);\n\n  const handleTrigger = (e) => setTrigger(Math.random());\n\n  const handleCopyAddress = (userAddress) => {\n    navigator.clipboard.writeText(userAddress);\n    alert(\"Address copied to clipboard!\");\n  };\n\n  const shortenAddress = (address, nom) => {\n    return `${address.slice(0, nom)}...${address.slice(-7)}`;\n  };\n\n  ///sort the displayed NFTs\n\n  const [selectedTab, setSelectedTab] = useState(\"Activity\");\n  const [selectedCollection, setSelectedCollection] = useState(\n    \"rw7qm-eiaaa-aaaak-aaiqq-cai\"\n  );\n\n  const handleTabClick = (tab) => {\n    setSelectedTab(tab);\n  };\n\n  const sortDisplayNFTs = useMemo(() => {\n    console.log(\"here is the data :\", selectedTab);\n\n    if (selectedTab === \"Activity\") {\n      //filter the bulk data to get the transaction for the user account\n\n      let tokenListings = bulkData?.find((det) => det[0] == selectedCollection);\n\n      console.log(\"token listings :\", tokenListings);\n\n      let filteredTransactions = tokenListings[1]?.transactions?.filter(\n        (trans) =>\n          trans?.buyer ==\n            \"8edb53debf13d254295dbcbf1a888b0723a7f853a181e91e9518ec871fb934a6\" ||\n          trans?.seller === user?.principal\n      );\n\n      console.log(\"transactions :\", filteredTransactions);\n\n      return (\n        <ActivityTable\n          transactions={filteredTransactions}\n          selectedCollection={selectedCollection}\n        />\n      );\n    }\n\n    if (selectedTab === \"Collected\") {\n      let myNfts = collectedNFTS?.map((nft, index) => (\n        <div className={`${style.nftCard} ${style.nftCardHover}`}>\n          <img\n            src={`https://${\n              nft.canister_id\n            }.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n              nft.nftid,\n              nft.canister_id\n            )}&type=thumbnail`}\n            alt=\"\"\n            onClick={() =>\n              navigate(\n                nft.type === \"Listed\" &&\n                  \"../marketplace/\" + nft.canister_id + \"/\" + nft.nftid\n                // : \"../nft/\" + nft.canister_id + \"/\" + nft.nftid\n              )\n            }\n            className={style.nftImg}\n          />\n          <div className={style.info}>\n            <div className={style.infoLeft}>\n              <div className={style.collectionName}>{nft.collectionName}</div>\n            </div>\n            <div className={style.infoRight}>\n              <div className={style.assetName}>#{nft.nftid} </div>\n            </div>\n          </div>\n          <div className={style.buttonsContainer}>\n            {nft.type == \"Owned\" && (\n              <>\n                <ListNFT nft={nft} handleTrigger={handleTrigger} />\n                <TransferNFT nft={nft} handleTrigger={handleTrigger} />\n              </>\n            )}\n          </div>\n        </div>\n      ));\n      return myNfts;\n    }\n\n    if (selectedTab === \"Selling\") {\n      console.log(listedNFTS);\n\n      let myNfts = listedNFTS?.map((nft, index) => (\n        <div key={index} className={`${style.nftCard} ${style.nftCardHover}`}>\n          <img\n            src={`https://${\n              nft.canister_id\n            }.raw.icp0.io/?tokenid=${computeExtTokenIdentifier(\n              nft.nftid,\n              nft.canister_id\n            )}&type=thumbnail`}\n            alt=\"\"\n            onClick={() =>\n              navigate(\n                nft.type === \"Listed\" &&\n                  \"../marketplace/\" + nft.canister_id + \"/\" + nft.nftid\n                // : \"../nft/\" + nft.canister_id + \"/\" + nft.nftid\n              )\n            }\n            className={style.nftImg}\n          />\n          <div className={style.info}>\n            <div className={style.infoLeft}>\n              <div className={style.collectionName}>{nft.collectionName}</div>\n            </div>\n            <div className={style.infoRight}>\n              <div className={style.assetName}>#{nft.nftid} </div>\n            </div>\n          </div>\n          <div className={style.buttonsContainer}>\n            {nft.type == \"Owned\" && (\n              <>\n                <ListNFT nft={nft} handleTrigger={handleTrigger} />\n                <TransferNFT nft={nft} handleTrigger={handleTrigger} />\n              </>\n            )}\n          </div>\n        </div>\n      ));\n\n      return myNfts;\n    }\n  }, [selectedTab,refreshData]);\n\n  // const sortDisplayNFTs = (nfts) => {\n\n  //   console.log(selectedTab);\n\n  //  }\n\n  return (\n    <>\n      {user?.principal ? (\n        <div className={style.wrapper}>\n          <div className={style.profileSection}>\n            <div className=\"flex rounded-t-md text-black font-bold px-4 bg-white\">\n              Overview\n            </div>\n\n            <div className=\"flex flex-col md:flex-row gap-2 w-full \">\n              <div className=\" flex flex-col px-4 py-2 md:py-4 w-full\">\n                <span className=\"font-bold\">Wallet ID:</span>\n                {user?.principal && (\n                  <div className=\"flex flex-row gap-2  items-center\">\n                    <span className=\"flex flex-row justify-center items-center\">\n                      {shortenAddress(user?.principal?.toString(), 20)}\n                    </span>\n\n                    <AiOutlineCopy\n                      size={25}\n                      className=\"cursor-pointer border rounded-md p-1 hover:text-lg\"\n                      onClick={() =>\n                        handleCopyAddress(user?.principal?.toText())\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\" flex flex-col px-4 py-1 md:py-4 w-full\">\n                <span className=\"font-bold\">Balance:</span>\n                <div className=\"flex flex-row   items-center\">\n                  <span className=\"flex justify-center items-center\">\n                    {userIcpBalance ? (\n                      userIcpBalance\n                    ) : (\n                      <ClipLoader size={15} color=\"white\" />\n                    )}{\" \"}\n                    ICP\n                  </span>\n                  <TransferICP/>\n                </div>\n              </div>\n            </div>\n\n            <div className=\" flex flex-col px-4 py-1  md:py-4 w-full\">\n              <span className=\"font-bold\">Account Identifier:</span>\n\n              {user?.principal ? (\n                <div className=\"flex flex-row gap-2  items-center\">\n                  <span>\n                    {shortenAddress(\n                      AccountIdentifier.fromPrincipal({\n                        principal: user.principal,\n                      })?.toHex(),\n                      18\n                    )}\n                  </span>\n\n                  <AiOutlineCopy\n                    size={25}\n                    className=\"cursor-pointer border rounded-md p-1 hover:text-lg\"\n                    onClick={() =>\n                      handleCopyAddress(\n                        AccountIdentifier.fromPrincipal({\n                          principal: user.principal,\n                        })?.toHex()\n                      )\n                    }\n                  />\n                </div>\n              ) : (\n                <ClipLoader />\n              )}\n            </div>\n\n            {/* <TransferICP /> */}\n\n            {/* <div>{userIcpBalance && userIcpBalance} ICP</div> */}\n          </div>\n\n          <SearchP selectedTab={selectedTab} handleTabClick={handleTabClick} />\n          <NftDisplay results={sortDisplayNFTs} />\n        </div>\n      ) : (\n        navigate(\"/\")\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n"],"names":["_ref","nft","handleTrigger","isModalOpen","setIsModalOpen","useState","newPrice","setNewPrice","buttonLoading","setButtonLoading","queryClient","useQueryClient","invalidateListings","useFecth","authenticatedAgent","useAgent","showModal","setShowModal","modalMessage","setModalMessage","modalType","setModalType","displayNotificationModal","async","_message","_type","setTimeout","data","userPrincipal","useQuery","queryKey","user","useIdentityKit","mutateAsync","HandleList","useMutation","mutationFn","e","handleList","onSuccess","preventDefault","marketplaceActor","createActor","MARKETPLACE_CANISTER","marketIDL","nftActor","PAWS_ARENA_CANISTER","PawsIDL","initRes","init_list_nft","principal","nftid","Kitties","parseInt","console","log","tokenIdentifier","computeExtTokenIdentifier","canister_id","transferRes","transfer","amount","from","memo","notify","subaccount","to","Principal","fromText","token","res","complete_listing","status","status_text","error_text","error","setQueryData","Math","random","alert","_jsxs","className","children","_jsx","onClick","CgClose","onSubmit","htmlFor","type","id","value","onChange","target","required","ClipLoader","color","size","isPreviewOpen","setPreviewOpen","recipient","setRecipient","HandleTransfer","handleTransfer","Number","transferResults","address","ok","err","placeholder","InputSection","onPreview","onRecipientChange","onAmountChange","onClose","PreviewSection","_ref2","onWithdraw","DetailItem","label","slice","_ref3","TransferICP","setAmount","invalidateUserNfts","invalidateUserBalance","useFetch","userIcpBalance","IcpActor","handleWithdraw","processWithdraw","message","MY_LEDGER_CANISTER_ID","ICPDL","icrc1_transfer","owner","fee","from_subaccount","created_at_time","Ok","Err","PiHandWithdrawBold","selectedTab","handleTabClick","tabStyle","tab","results","_transactions$slice","transactions","selectedCollection","length","map","trans","index","_trans$seller","src","alt","height","width","getTokenIndex","shortenAddress","seller","toString","buyer","price","convertExpiryDate","time","style","wrapper","profileSection","addressContainer","balance","qrCodeContainer","qrCodeLabel","nftsSection","nftGrid","nftCard","nftImg","info","infoLeft","assetName","buttonsContainer","Profile","_user$principal","_AccountIdentifier$fr","userNFTList","setuserNFTList","collectedNFTS","setCollectedNFTS","listedNFTS","setListedNFTS","userAccount","setUserAccount","trigger","setTrigger","refreshData","bulkData","navigate","useNavigate","useEffect","AccountIdentifier","fromPrincipal","subAccount","undefined","toHex","collected","listed","get_all_user_listed_nfts","isConfirmed","push","nft_id","nft_canister","collectionName","Object","keys","nft_category","accIdentifier","ownedTokens","tokens","Array","fetchUserListedNFTS","handleCopyAddress","userAddress","navigator","clipboard","writeText","nom","setSelectedTab","setSelectedCollection","sortDisplayNFTs","useMemo","_tokenListings$","_tokenListings$$trans","tokenListings","find","det","filteredTransactions","filter","ActivityTable","nftCardHover","infoRight","_Fragment","ListNFT","TransferNFT","AiOutlineCopy","_user$principal2","toText","_AccountIdentifier$fr2","SearchP","NftDisplay"],"sourceRoot":""}