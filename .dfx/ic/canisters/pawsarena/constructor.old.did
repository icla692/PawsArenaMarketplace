type AssetType = variant {
  other : text;
  canister : CanisterAssetType;
  direct : vec nat32;
};
type CanisterAssetType = record { id : nat32; canister : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type MintResponse = variant { Ok : vec nat32; Err : text };
type NFTType = variant {
  ListedProfile : nat32;
  AuctionedPost : nat32;
  Posted : nat32;
  ListedPost : nat32;
  AuctionedProfile : nat32;
  Unposted : nat32;
};
type Result = variant { Ok; Err : text };
service : {
  add_admin : (principal) -> ();
  add_asset : (text, text, text, AssetType, nat) -> ();
  auction_profile_nft_on_marketplace : (nat32, nat32, nat32, nat64) -> (Result);
  available_balance : () -> (nat) query;
  execute_mint : (text, text) -> (MintResponse);
  generate_user_feed : (nat32) -> (
      vec record { nat32; vec nat32 },
    ) composite_query;
  get_admins : () -> (vec principal) query;
  get_trusted_origins : () -> (vec text);
  get_user_nfts : (text, nat32) -> (vec NFTType) composite_query;
  get_user_profile_nft : (text, principal) -> (vec nat32);
  http_request : (HttpRequest) -> (HttpResponse) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  is_caller_admin : () -> (Result) query;
  is_handle_available : (text) -> (bool) query;
  list_profile_nft_on_marketplace : (nat32, nat32, nat32) -> (Result);
  remove_admin : (principal) -> ();
  stream_asset : (text, blob, bool) -> (bool);
  whoami : () -> (text) query;
}